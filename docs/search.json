[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Some achievements: - fast.ai regular member - winner of community Kaggle competition"
  },
  {
    "objectID": "posts/SSD_base.html",
    "href": "posts/SSD_base.html",
    "title": "Object Detection from scratch - Single Shot Detector",
    "section": "",
    "text": "Building an Object Detection from scratch with fastai v2\nRecently, I had a project that needs to modify an Object Detection Architecture. However, when I searched for related repositories, I found it quite difficult to understand. We have a lot of libraries for use out of the box but hard to make changes to the source code.\nThis blog is the implementation of Single Shot Detector Architecture using fast.ai in literate programming style so the readers can follow and run each line of code themselves in case needed to deepen their knowledge.\nThe original idea was taken from the fastai 2018 course. Readers are recommended to watch this lecture. 2018 Lecture\nSome useful notes taken by students: - Cedrick Note - Francesco Note\nDataset used: Pascal 2017\nWhat we can learn from this notebook:"
  },
  {
    "objectID": "posts/SSD_base.html#object-detection-dataloaders",
    "href": "posts/SSD_base.html#object-detection-dataloaders",
    "title": "Object Detection from scratch - Single Shot Detector",
    "section": "Object Detection Dataloaders",
    "text": "Object Detection Dataloaders\nFor objection detection, you have:\n\n1 independent variable (X): Image\n2 dependents variables (Ys): Bounding box and Class\n\nIn this part, we will use fastai DataBlock to build Object Detection Dataloaders. The idea is from each image file name, we will have:\n\nAn Image\nBounding Boxes getting from the annotations file\nLabels correspond to each bounding box\n\n\n\n\n\n\n\nNote\n\n\n\n\nZero padding: Each image have a different number of objects. Then, to make it possible to gather multiple images to one batch, the number of bounding boxes per image is the maximum in that batch (the padding value by default is 0) bb_pad\nBackground class: In Object Detection, we need to have a class that represents the background. fastai do it automatically for you by adding #na# at index 0\nThe coordinates of bounding box is rescaled to ~ -1 -> 1 in fastai/vision/core.py _scale_pnts\n\n\n\n( Check out some outputs below for details )\n\n\n\nList of Files to Data\n\n\n\npath = untar_data(URLs.PASCAL_2007)\n\n\npath.ls()\n\n(#8) [Path('/home/ubuntu/.fastai/data/pascal_2007/train.json'),Path('/home/ubuntu/.fastai/data/pascal_2007/test.json'),Path('/home/ubuntu/.fastai/data/pascal_2007/test'),Path('/home/ubuntu/.fastai/data/pascal_2007/train.csv'),Path('/home/ubuntu/.fastai/data/pascal_2007/segmentation'),Path('/home/ubuntu/.fastai/data/pascal_2007/valid.json'),Path('/home/ubuntu/.fastai/data/pascal_2007/train'),Path('/home/ubuntu/.fastai/data/pascal_2007/test.csv')]\n\n\n\nimgs, lbl_bbox = get_annotations(path/'train.json') \n\n\nimgs[0], lbl_bbox[0]\n\n('000012.jpg', ([[155, 96, 351, 270]], ['car']))\n\n\n\nimg2bbox = dict(zip(imgs, lbl_bbox))\n\n\nfirst = {k: img2bbox[k] for k in list(img2bbox)[:1]}; first\n\n{'000012.jpg': ([[155, 96, 351, 270]], ['car'])}\n\n\n\ngetters = [lambda o: path/'train'/o, lambda o: img2bbox[o][0], lambda o: img2bbox[o][1]]\n\n\nitem_tfms = [Resize(224, method='squish'),]\nbatch_tfms = [Rotate(), Flip(), Dihedral()]\n\n\npascal = DataBlock(blocks=(ImageBlock, BBoxBlock, BBoxLblBlock),\n                 splitter=RandomSplitter(),\n                 getters=getters,\n                 item_tfms=item_tfms,\n                 batch_tfms=batch_tfms,\n                 n_inp=1)\n\n\ndls = pascal.dataloaders(imgs, bs = 128)\n\n\n\n\n\n\n\nNote\n\n\n\n#na# is the background class as defined in BBoxLblBlock\n\n\n\ndls.vocab\n\n['#na#', 'aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car', 'cat', 'chair', 'cow', 'diningtable', 'dog', 'horse', 'motorbike', 'person', 'pottedplant', 'sheep', 'sofa', 'train', 'tvmonitor']\n\n\n\nlen(dls.vocab)\n\n21\n\n\n\ndls.show_batch()\n\n\n\n\n\none_batch = dls.one_batch()\n\n\n\n\n\n\n\nNote\n\n\n\nThe coordinates of boudning box is rescaled to ~ -1 -> 1 in fastai/vision/core.py\n\n\n\none_batch[1][0][0]\n\nTensorBBox([-0.0440, -0.2171,  0.2200,  0.5046], device='cuda:0')\n\n\n\n# Zero Padding\none_batch[2]\n\nTensorMultiCategory([[13, 15,  0,  ...,  0,  0,  0],\n                     [12, 15, 15,  ...,  0,  0,  0],\n                     [18,  5,  5,  ...,  0,  0,  0],\n                     ...,\n                     [15,  8,  8,  ...,  0,  0,  0],\n                     [ 7,  0,  0,  ...,  0,  0,  0],\n                     [ 8,  0,  0,  ...,  0,  0,  0]], device='cuda:0')"
  },
  {
    "objectID": "posts/SSD_base.html#model-architecture",
    "href": "posts/SSD_base.html#model-architecture",
    "title": "Object Detection from scratch - Single Shot Detector",
    "section": "Model Architecture",
    "text": "Model Architecture\n\n\n\nSSD Architecture\n\n\nIn a nutshell, Object Detection Model is a model that does 2 jobs at the same time:\n\na regressor with 4 outputs for bounding box\na classifier with c classes.\n\nTo handle multiple objects, here comes the grid cell. For each cell, you will have an atomic prediction for the object that dominates a part of the image ( This is the idea of the receptive field that you will see in the next part )\n\n\n\n\n\n\nMy Intuition\n\n\n\nIn Machine Learning, it is better to improve from something rather than start from scratch. You can see this in: Image Classification Architecture - Resnet with the Skip Connections, or Gradient Boosting in Tree-based Model. There is a common point in the grid-cell SSD architecture, the model will try to improve from an anchor box rather than searching through the whole image.\n\n\nWe should better leverage a well-known pretrained classification model to be used as a backbone / or body ( resnet in this tutorial ) if the object is similar to the Imagenet dataset. The head part will follow to adapt to the necessary dimension\nTo easily develop the idea - visualize and debug, we will start with a simple 4x4 grid\n\ndef flatten_conv(x,k):\n    # Flatten the 4x4 grid to dim16 vectors\n    bs,nf,gx,gy = x.size()\n    x = x.permute(0,2,3,1).contiguous()\n    return x.view(bs,-1,nf//k)\n\n\nclass OutConv(nn.Module):\n    # Output Layers for SSD-Head. Contains oconv1 for Classification and oconv2 for Detection\n    def __init__(self, k, nin, bias):\n        super().__init__()\n        self.k = k\n        self.oconv1 = nn.Conv2d(nin, (len(dls.vocab))*k, 3, padding=1)\n        self.oconv2 = nn.Conv2d(nin, 4*k, 3, padding=1)\n        self.oconv1.bias.data.zero_().add_(bias)\n        \n    def forward(self, x):\n        return [flatten_conv(self.oconv1(x), self.k),\n                flatten_conv(self.oconv2(x), self.k)]\n\n\nclass StdConv(nn.Module):\n    # Standard Convolutional layers \n    def __init__(self, nin, nout, stride=2, drop=0.1):\n        super().__init__()\n        self.conv = nn.Conv2d(nin, nout, 3, stride=stride, padding=1)\n        self.bn = nn.BatchNorm2d(nout)\n        self.drop = nn.Dropout(drop)\n        \n    def forward(self, x): return self.drop(self.bn(F.relu(self.conv(x))))\n\n\nclass SSD_Head(nn.Module):\n    def __init__(self, k, bias):\n        super().__init__()\n        self.drop = nn.Dropout(0.25)\n        self.sconv0 = StdConv(512,256, stride=1)\n        self.sconv2 = StdConv(256,256)\n        self.out = OutConv(k, 256, bias)\n        \n    def forward(self, x):\n        x = self.drop(F.relu(x))\n        x = self.sconv0(x)\n        x = self.sconv2(x)\n        return self.out(x)\n\nWe start with k = 1 which is the number of alterations for each anchor box ( we have a lot of anchor boxes later )\n\nk=1\n\n\nhead_reg4 = SSD_Head(k, -3.)\n\n\nbody = create_body(resnet34(True))\nmodel = nn.Sequential(body, head_reg4)\n\n/home/ubuntu/miniconda3/envs/blog/lib/python3.10/site-packages/torchvision/models/_utils.py:135: UserWarning: Using 'weights' as positional parameter(s) is deprecated since 0.13 and will be removed in 0.15. Please use keyword parameter(s) instead.\n  warnings.warn(\n/home/ubuntu/miniconda3/envs/blog/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet34_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet34_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n\n\nTo understand and verify that everything works ok, you can take out a batch and run the model on it\n\nout0 = body(one_batch[0].cpu())\n\n\nout1 = head_reg4(out0)\n\n\nout1[0].shape, out1[1].shape\n\n(torch.Size([128, 16, 21]), torch.Size([128, 16, 4]))\n\n\nShape explanation:\n\n128: batch size\n16: number of anchor boxes\n21: number of classes\n4: number of bounding box coordinates"
  },
  {
    "objectID": "posts/SSD_base.html#x4-anchor-boxes-and-receptive-field",
    "href": "posts/SSD_base.html#x4-anchor-boxes-and-receptive-field",
    "title": "Object Detection from scratch - Single Shot Detector",
    "section": "4x4 Anchor boxes and Receptive Field",
    "text": "4x4 Anchor boxes and Receptive Field\nAs mentioned before, we will start with a 4x4 grid to better visualize the idea. The size will be normalized to [0,1]\nThe idea of why, after the Body, we use Conv2d and not Linear Layer to make a 4x4x(4+c) output dimension instead of 16x(4+c) shape is - Receptive Field. This way, each cell will have information that comes directly from the location corresponding to the anchor box. The illustration is below.\n\n\n\nSSD vs YOLO\n\n\n\n\n\nReceptive Field\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBe very careful about the bounding box format when working with Object Detection. There are many different formats out there. For example:\n\npascal_voc: [x_min, y_min, x_max, y_max]\ncoco: [x_min, y_min, width, height]\nYOLO: [x_center, y_center, width, height]\n\nThe bounding box format in this tutorial is [x_min, y_min, x_max, y_max]\n\n\nCheck out Bounding Boxes Augmentation for more details:\nWe define the anchors coordinates as below\n\nanc_grid = 4 # Start with only 4x4 grid and no variation for each cell\nk = 1 # Variation of each anchor box\nanc_offset = 1/(anc_grid*2)\nanc_x = np.repeat(np.linspace(anc_offset, 1-anc_offset, anc_grid), anc_grid) # Center of anc in x\nanc_y = np.tile(np.linspace(anc_offset, 1-anc_offset, anc_grid), anc_grid) # Center f anc in y\n\n\nanc_x\n\narray([0.125, 0.125, 0.125, 0.125, 0.375, 0.375, 0.375, 0.375, 0.625,\n       0.625, 0.625, 0.625, 0.875, 0.875, 0.875, 0.875])\n\n\n\nanc_y\n\narray([0.125, 0.375, 0.625, 0.875, 0.125, 0.375, 0.625, 0.875, 0.125,\n       0.375, 0.625, 0.875, 0.125, 0.375, 0.625, 0.875])\n\n\n\nanc_ctrs = np.tile(np.stack([anc_x,anc_y], axis=1), (k,1)) # Anchor centers\nanc_sizes = np.array([[1/anc_grid,1/anc_grid] for i in range(anc_grid*anc_grid)])\n\n\nanc_ctrs\n\narray([[0.125, 0.125],\n       [0.125, 0.375],\n       [0.125, 0.625],\n       [0.125, 0.875],\n       [0.375, 0.125],\n       [0.375, 0.375],\n       [0.375, 0.625],\n       [0.375, 0.875],\n       [0.625, 0.125],\n       [0.625, 0.375],\n       [0.625, 0.625],\n       [0.625, 0.875],\n       [0.875, 0.125],\n       [0.875, 0.375],\n       [0.875, 0.625],\n       [0.875, 0.875]])\n\n\n\nanc_sizes\n\narray([[0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25],\n       [0.25, 0.25]])\n\n\n\nanchors = torch.tensor(np.concatenate([anc_ctrs, anc_sizes], axis=1), requires_grad=False).cuda()\n# Coordinates with format: center_x, center_y, W, H\n\n\nanchors\n\ntensor([[0.1250, 0.1250, 0.2500, 0.2500],\n        [0.1250, 0.3750, 0.2500, 0.2500],\n        [0.1250, 0.6250, 0.2500, 0.2500],\n        [0.1250, 0.8750, 0.2500, 0.2500],\n        [0.3750, 0.1250, 0.2500, 0.2500],\n        [0.3750, 0.3750, 0.2500, 0.2500],\n        [0.3750, 0.6250, 0.2500, 0.2500],\n        [0.3750, 0.8750, 0.2500, 0.2500],\n        [0.6250, 0.1250, 0.2500, 0.2500],\n        [0.6250, 0.3750, 0.2500, 0.2500],\n        [0.6250, 0.6250, 0.2500, 0.2500],\n        [0.6250, 0.8750, 0.2500, 0.2500],\n        [0.8750, 0.1250, 0.2500, 0.2500],\n        [0.8750, 0.3750, 0.2500, 0.2500],\n        [0.8750, 0.6250, 0.2500, 0.2500],\n        [0.8750, 0.8750, 0.2500, 0.2500]], device='cuda:0',\n       dtype=torch.float64)\n\n\n\ngrid_sizes = torch.tensor(np.array([1/anc_grid]), requires_grad=False).unsqueeze(1).cuda()\n\n\ngrid_sizes\n\ntensor([[0.2500]], device='cuda:0', dtype=torch.float64)"
  },
  {
    "objectID": "posts/SSD_base.html#visualization-utils",
    "href": "posts/SSD_base.html#visualization-utils",
    "title": "Object Detection from scratch - Single Shot Detector",
    "section": "Visualization Utils",
    "text": "Visualization Utils\nIt is very helpful (to understand/ debug) when you can visualize data of every step. Many subtle tiny details happen in this Object Detection Problem. One careless implementation can lead to hours (or even days) to debug. Sometimes, you just wish that the code throws you some bugs that you can trackback.\n\n\n\n\n\n\nWarning\n\n\n\nThere are some details that you need to double check\n\nAre your ground truth bounding boxes, anchor boxes, bounding box activations are in the same scale ( -1 -> 1 or 0 -> 1 ) ?\nDo the background class is handled correctly? ( This is a bug when I develop this notebook that the old version of the fastai course set the index of background as number_of_classes but in the latest version, it is 0 )\nDo you map correctly each Anchor Box to the ground-true object? (This will be shown in the next session)\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDon’t hesitate to take out one batch from your dataloader and verify every single detail. When I start to use fast.ai, I made a big mistake that thinking these data are already processed and we can not show things directly from there. This data is very important, it is the input of your model. It must be carefully double-checked.\n\n\nBelow we will try to plot some images from a batch with their bounding boxes and classes, to see that we did not missing anything\n\nimport matplotlib.colors as mcolors\nimport matplotlib.cm as cmx\nfrom matplotlib import patches, patheffects\n\n\ndef show_img(im, figsize=None, ax=None):\n    if not ax: fig,ax = plt.subplots(figsize=figsize)\n    ax.imshow(im)\n    ax.set_xticks(np.linspace(0, 224, 8))\n    ax.set_yticks(np.linspace(0, 224, 8))\n    ax.grid()\n    ax.set_yticklabels([])\n    ax.set_xticklabels([])\n    return ax\n\n\ndef draw_outline(o, lw):\n    o.set_path_effects([patheffects.Stroke(\n        linewidth=lw, foreground='black'), patheffects.Normal()])\n\n\ndef draw_text(ax, xy, txt, sz=14, color='white'):\n    text = ax.text(*xy, txt,\n        verticalalignment='top', color=color, fontsize=sz, weight='bold')\n    draw_outline(text, 1)\n\n\ndef draw_rect(ax, b, color='white'):\n    patch = ax.add_patch(patches.Rectangle(b[:2], *b[-2:], fill=False, edgecolor=color, lw=2))\n    draw_outline(patch, 4)\n\n\ndef bb_hw(a): return np.array([a[1],a[0],a[3]-a[1]+1,a[2]-a[0]+1])\n\n\ndef get_cmap(N):\n    color_norm  = mcolors.Normalize(vmin=0, vmax=N-1)\n    return cmx.ScalarMappable(norm=color_norm, cmap='Set3').to_rgba\n\n\nnum_colr = 12\ncmap = get_cmap(num_colr)\ncolr_list = [cmap(float(x)) for x in range(num_colr)]\n\n\ndef show_ground_truth(ax, im, bbox, clas=None, prs=None, thresh=0.3):\n    bb = [bb_hw(o) for o in bbox.reshape(-1,4)]\n    if prs is None:  prs  = [None]*len(bb)\n    if clas is None: clas = [None]*len(bb)\n    ax = show_img(im, ax=ax)\n    k=0\n    for i,(b,c,pr) in enumerate(zip(bb, clas, prs)):\n        if((b[2]>1) and (pr is None or pr > thresh)):\n            k+=1\n            draw_rect(ax, b, color=colr_list[i%num_colr])\n            txt = f'{k}: '\n            if c is not None: txt += ('bg' if c==0 else dls.vocab[c])\n            if pr is not None: txt += f' {pr:.2f}'\n            draw_text(ax, b[:2], txt, color=colr_list[i%num_colr])\n\n\ndef torch_gt(ax, ima, bbox, clas, prs=None, thresh=0.4):\n    return show_ground_truth(ax, ima, to_np((bbox*224).long()),\n         to_np(clas), to_np(prs) if prs is not None else None, thresh)\n\n\nShowing one batch\n\nidx = 5\n\n\nimg = one_batch[0][idx].permute(2,1,0).cpu()\n\n\nplt.imshow(img)\n\n<matplotlib.image.AxesImage>\n\n\n\n\n\nExtracting one batch for your dataloader and see if the data is OK\n\nx = one_batch[0].permute(0,3,2,1).cpu()\n\n\ny = one_batch[1:]\n\nBecause the bounding box in the dataloader is scaled to -1 -> 1, it needs to be rescaled to 0 -> 1 for drawing by doing (bb+1)/2*Size\n\n## Bounding Box after dataloader should Rescale\nfig, axes = plt.subplots(3, 4, figsize=(16, 12))\nfor i,ax in enumerate(axes.flat):\n    show_ground_truth(ax, x[i].cpu(), ((y[0][i]+1)/2*224).cpu(), y[1][i].cpu())\nplt.tight_layout()\n\n\n\n\nEverything looks fine! We have correct bounding boxes and their corresponding classes"
  },
  {
    "objectID": "posts/SSD_base.html#map-to-ground-truth-and-loss-function",
    "href": "posts/SSD_base.html#map-to-ground-truth-and-loss-function",
    "title": "Object Detection from scratch - Single Shot Detector",
    "section": "Map to Ground-Truth and Loss function",
    "text": "Map to Ground-Truth and Loss function\nAs you might guess, There are 2 components forming the Object Detection Loss: Classification Loss (For the class) and Localization Loss (For the bounding box)\nThe idea is, for each image, we will: - Calculate the Intersection-over-Union (IoU) of each predefined Anchor Box with the Object Bounding Box. - Assign the label for each cell (Map to ground truth) according to the IoUs. Background will be assigned to Cell which overlaps with no object - Calculate the Classification Loss for all Cells - Calculate the Bounding Box Location Loss only for Cells responsible to Objects (no Background) - Take the sum of these 2 losses\n\n\n\n\n\n\nNote\n\n\n\nCurrently, we will loop for each image in a batch to calculate its loss and then sum them all. I think we might have a better way to vectorize these operations, or, calculate everything in one shot directly with a batch tensor\n\n\n\n\n\nMap to Grouth Truth\n\n\n\ndef get_y(bbox,clas):\n    \"\"\"\n    Remove the zero batching from a batch\n    \n    Because the number of object in each image are different so\n    we need to zero padding for batching \n    \"\"\"\n    bbox = bbox.view(-1,4)\n    clas = clas.view(-1,1)\n    bb_keep = ((bbox[:,2]-bbox[:,0])>0).nonzero()[:,0]\n    return TensorBase(bbox)[bb_keep],TensorBase(clas)[bb_keep]\n\n\none_batch[2][idx]\n\nTensorMultiCategory([16, 16, 16, 16, 14,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n                      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n                      0,  0,  0,  0,  0,  0,  0], device='cuda:0')\n\n\n\nget_y(one_batch[1][idx], one_batch[2][idx])\n\n(TensorBBox([[ 0.0966, -1.0172,  0.4870, -0.4764],\n             [-0.3311, -1.0029,  0.0835, -0.4559],\n             [-0.3511, -1.0028,  0.0783, -0.4872],\n             [ 0.1286, -1.0201,  0.5700, -0.5041],\n             [ 0.4902,  0.1488,  1.0261,  0.9663],\n             [-0.8546, -0.6447, -0.2425, -0.2718]], device='cuda:0'),\n TensorBBox([[16],\n             [16],\n             [16],\n             [16],\n             [14],\n             [ 7]], device='cuda:0'))\n\n\nWe can see that all the zero values are removed before continuing to process\n\ndef hw2corners(ctr, hw): \n    # Function to convert BB format: (centers and dims) -> corners\n    return torch.cat([ctr-hw/2, ctr+hw/2], dim=1)\n\nThe Activations are passed to a Tanh function to rescale their values to -1 -> 1. Then they are processed to make coherent with the Grid Coordinates:\n\nThe center of each cell’s prediction stays in the cell\nThe size of each cell’s prediction can be varied from 1/2 to 3/2 cell’s size to give more flexibility\n\n\n\n\n\n\n\nTip\n\n\n\nThe bounding box activations are in [x_center, y_center, width, height] format to easily define the min/max scale to the anchor box\n\n\n\ndef actn_to_bb(actn, anchors):\n    actn_bbs = torch.tanh(actn)\n    actn_centers = (actn_bbs[:,:2]/2 * grid_sizes) + anchors[:,:2]\n    actn_hw = (actn_bbs[:,2:]/2+1) * anchors[:,2:]\n    return hw2corners(actn_centers, actn_hw)\n\n\ndef one_hot_embedding(labels, num_classes):\n    return torch.eye(num_classes)[labels].cuda()\n\n\ndef intersect(box_a, box_b):\n    \"\"\"\n    Intersect area between to bounding boxes\n    \"\"\"\n    max_xy = torch.min(box_a[:, None, 2:], box_b[None, :, 2:])\n    min_xy = torch.max(box_a[:, None, :2], box_b[None, :, :2])\n    inter = torch.clamp((max_xy - min_xy), min=0)\n    return inter[:, :, 0] * inter[:, :, 1]\n\n\ndef box_sz(b): return ((b[:, 2]-b[:, 0]) * (b[:, 3]-b[:, 1]))\n\n\ndef jaccard(box_a, box_b):\n    \"\"\"\n    Jaccard or Intersection over Union\n    \"\"\"\n    inter = intersect(box_a, box_b)\n    union = box_sz(box_a).unsqueeze(1) + box_sz(box_b).unsqueeze(0) - inter\n    return inter / union\n\nMap to Ground Truth (Visualization below). The idea is looping through all anchor boxes and calculating the overlaps with the Ground Truth bounding boxes, then assigning each Anchor Box to the corresponding class\n\ndef map_to_ground_truth(overlaps):\n    prior_overlap, prior_idx = overlaps.max(1) # 3\n    gt_overlap, gt_idx = overlaps.max(0) # 16\n    gt_overlap[prior_idx] = 1.99\n    for i,o in enumerate(prior_idx): gt_idx[o] = i\n    return gt_overlap,gt_idx\n\nFor calculating loss, we will loop through every images in a batch and calculate loss for each image (ssd_1_loss), then summing the result with ssd_loss. The Classification Loss (loss_f) currently is left empty as we will discussion it later in the next section.\n\ndef ssd_1_loss(b_c,b_bb,bbox,clas):\n    bbox,clas = get_y(bbox,clas)\n    bbox = (bbox+1)/2\n    a_ic = actn_to_bb(b_bb, anchors)\n    overlaps = jaccard(bbox.data, anchor_cnr.data)\n    gt_overlap,gt_idx = map_to_ground_truth(overlaps)\n    gt_clas = clas[gt_idx]\n    pos = gt_overlap > 0.4\n    pos_idx = torch.nonzero(pos)[:,0]\n    gt_clas[~pos] = 0  # Assign the background to idx 0\n    gt_bbox = bbox[gt_idx]\n    loc_loss = ((TensorBase(a_ic[TensorBase(pos_idx)]) - TensorBase(gt_bbox[TensorBase(pos_idx)])).abs()).mean()\n    clas_loss  = loss_f(b_c, gt_clas)\n    return loc_loss, clas_loss\n\n\nanchor_cnr = hw2corners(anchors[:,:2], anchors[:,2:]).cuda()\n\n\nShowing Map To Ground Truth\nAs mentioned earlier, Map-to-Ground-Truth is a very important step for calculating loss. We should show it to make sure everything looks fine\n\nidx = 0\nbbox = one_batch[1][idx].cuda()\nclas = one_batch[2][idx].cuda()\n\n\nbbox,clas = get_y(bbox,clas)\nbbox = (bbox+1)/2\n# a_ic = actn_to_bb(b_bb, anchors)\noverlaps = jaccard(bbox.data, anchor_cnr.data)\ngt_overlap,gt_idx = map_to_ground_truth(overlaps)\ngt_clas = clas[gt_idx]\npos = gt_overlap > 0.4\npos_idx = torch.nonzero(pos)[:,0]\ngt_clas[~pos] = 0  # Assign the background to idx 0\ngt_bbox = bbox[gt_idx]\n\n\nima = one_batch[0][idx].permute(2,1,0).cpu()\n\n\nfig, ax = plt.subplots(figsize=(7,7))\ntorch_gt(ax, ima, bbox, clas)\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(7,7))\ntorch_gt(ax, ima, anchor_cnr, gt_clas)\n\n\n\n\n\nsz = 224\n\n\n\nClassificaton Loss: Binary Cross Entropy and why Focal Loss\n2 tricks can be used for Classification Loss:\n\nBinary Cross-Entropy Loss without background\nFurther improve Binary Cross-Entropy Loss with Focal Loss\n\n\nBinary Cross-Entropy\n\n\nIf we treat the Background Class as one class and ask the Model to understand what is a Background, it might be too difficult. We can translate it to a set of easier questions: Is it a Cat? Is it a Dog? … through all the classes, which is exactly what Binary Cross-Entropy does\n\n\nFocal Loss\n\n\nThe classification task in object detection is very imbalance that we have a lot of background objects (check the Match to Ground-Truth image above). If we just use Binary Cross-Entropy Loss function, it will try all efforts to improve background classification\n\n\n\n\nFocal Loss vs Binary Cross Entropy Loss\n\n\nQuote from fastai2018 course:\nThe blue line is the binary cross entropy loss. If the answer is not a motorbike, and I said “I think it’s not a motorbike and I am 60% sure” with the blue line, the loss is still about 0.5 which is pretty bad. So if we want to get our loss down, then for all these things which are actually back ground, we have to be saying “I am sure that is background”, “I am sure it’s not a motorbike, or a bus, or a person” — because if I don’t say we are sure it is not any of these things, then we still get loss.\nThat is why the motorbike example did not work. Because even when it gets to lower right corner and it wants to say “I think it’s a motorbike”, there is no payoff for it to say so. If it is wrong, it gets killed. And the vast majority of the time, it is background. Even if it is not background, it is not enough just to say “it’s not background” — you have to say which of the 20 things it is.\nSo the trick is to trying to find a different loss function that looks more like the purple line. Focal loss is literally just a scaled cross entropy loss. Now if we say “I’m .6 sure it’s not a motorbike” then the loss function will say “good for you! no worries”.\n\nclass BCE_Loss(nn.Module):\n    def __init__(self, num_classes):\n        super().__init__()\n        self.num_classes = num_classes\n\n    def forward(self, pred, targ):\n        t = one_hot_embedding(targ.squeeze(), self.num_classes)\n        t = t[:,1:] # Start from 1 to exclude the Background\n        x = pred[:,1:]\n        w = self.get_weight(x,t)\n        return F.binary_cross_entropy_with_logits(x, t, w.detach(), reduction='sum')/self.num_classes\n    \n    def get_weight(self,x,t): return None\n\n\nclass FocalLoss(BCE_Loss):\n    def get_weight(self,x,t):\n        alpha,gamma = 0.25,1\n        p = x.sigmoid()\n        pt = p*t + (1-p)*(1-t)\n        w = alpha*t + (1-alpha)*(1-t)\n        return w * (1-pt).pow(gamma)\n\nThe ssd_loss will loop through every image in a batch and accumulate loss\n\ndef ssd_loss(pred, bbox, clas):\n    lcs, lls = 0., 0.\n    W = 30\n    for b_c, b_bb, bbox, clas in zip(*pred, bbox, clas):\n        loc_loss, clas_loss = ssd_1_loss(b_c, b_bb, bbox, clas)\n        lls += loc_loss\n        lcs += clas_loss\n    return lls + lcs\n\n\nloss_f = FocalLoss(len(dls.vocab))"
  },
  {
    "objectID": "posts/SSD_base.html#training-simple-model",
    "href": "posts/SSD_base.html#training-simple-model",
    "title": "Object Detection from scratch - Single Shot Detector",
    "section": "Training Simple Model",
    "text": "Training Simple Model\n\nmodel = nn.Sequential(body, head_reg4)\n\n\nlearner = Learner(dls, model, loss_func=ssd_loss)\n\n\nlearner.fit_one_cycle(5, 1e-3)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      time\n    \n  \n  \n    \n      0\n      34.889286\n      28.454723\n      00:25\n    \n    \n      1\n      32.127403\n      29.533695\n      00:23\n    \n    \n      2\n      30.588394\n      26.637667\n      00:23\n    \n    \n      3\n      29.455709\n      25.630453\n      00:23\n    \n    \n      4\n      28.651590\n      25.509596\n      00:23\n    \n  \n\n\n\nThe loss decreases, and the model can learn something. Looking at the results shown below, we can see that the predictions are not so bad but not particularly good either. In the next session, we can see how to improve the results with more anchor boxes\n\nShow Results\n\none_batch = dls.valid.one_batch()\nlearner.model.eval();\npred = learner.model(one_batch[0])\nb_clas, b_bb = pred\nx = one_batch[0]\n\nfig, axes = plt.subplots(3, 4, figsize=(16, 12))\nfor idx,ax in enumerate(axes.flat):\n    ima = x.permute(0,3,2,1).cpu()[idx]\n#     ima=md.val_ds.ds.denorm(x)[idx]\n    bbox,clas = get_y(y[0][idx], y[1][idx])\n    a_ic = actn_to_bb(b_bb[idx], anchors)\n    torch_gt(ax, ima, a_ic, b_clas[idx].max(1)[1], b_clas[idx].max(1)[0].sigmoid(), 0.21)\n#plt.tight_layout()\nplt.subplots_adjust(wspace=0.15, hspace=0.15)"
  },
  {
    "objectID": "posts/SSD_base.html#more-anchors",
    "href": "posts/SSD_base.html#more-anchors",
    "title": "Object Detection from scratch - Single Shot Detector",
    "section": "More anchors",
    "text": "More anchors\nAs said earlier, the anchor box is a hint for the model to not go too far and focus on a part of the image. So obviously, 4x4 grid is not enough to predict an object of any size. In this part, by adding more Conv2d layers, we will have 3 grids: 4x4, 2x2, 1x1 and each cell will have 9 variations: 3-zooms and 3-ratios\nThe total number of anchors is: (16 + 4 + 1) x 9 = 189 anchors\n\n\n\nimage8.png\n\n\n\n# This is for release the GPU memrory while experimenting. I guess it is not enough. Please tell me if you know a better way\ndel learner\ndel model\nimport gc; gc.collect()\ntorch.cuda.empty_cache()\n\n\nanc_grids = [4,2,1]\nanc_zooms = [0.7, 1., 1.3]\nanc_ratios = [(1.,1.), (1.,0.5), (0.5,1.)]\nanchor_scales = [(anz*i,anz*j) for anz in anc_zooms for (i,j) in anc_ratios]\nk = len(anchor_scales)\nanc_offsets = [1/(o*2) for o in anc_grids]\nk\n\n9\n\n\n\nanc_x = np.concatenate([np.repeat(np.linspace(ao, 1-ao, ag), ag)\n                        for ao,ag in zip(anc_offsets,anc_grids)])\nanc_y = np.concatenate([np.tile(np.linspace(ao, 1-ao, ag), ag)\n                        for ao,ag in zip(anc_offsets,anc_grids)])\nanc_ctrs = np.repeat(np.stack([anc_x,anc_y], axis=1), k, axis=0)\n\n\nanc_x\n\narray([0.125, 0.125, 0.125, 0.125, 0.375, 0.375, 0.375, 0.375, 0.625,\n       0.625, 0.625, 0.625, 0.875, 0.875, 0.875, 0.875, 0.25 , 0.25 ,\n       0.75 , 0.75 , 0.5  ])\n\n\n\nanc_sizes  =   np.concatenate([np.array([[o/ag,p/ag] for i in range(ag*ag) for o,p in anchor_scales])\n               for ag in anc_grids])\ngrid_sizes = torch.tensor(np.concatenate([np.array([ 1/ag       for i in range(ag*ag) for o,p in anchor_scales])\n               for ag in anc_grids]), requires_grad=False).unsqueeze(1).cuda()\nanchors = torch.tensor(np.concatenate([anc_ctrs, anc_sizes], axis=1), requires_grad=False).float().cuda()\nanchor_cnr = hw2corners(anchors[:,:2], anchors[:,2:]).cuda()\n\n\nanchor_cnr.shape\n\ntorch.Size([189, 4])\n\n\nWe need to adjust the SSD head a little bit. We will add more Conv2D layer with StdConv (to create 2x2 and 1x1 grids). After each StdConv is an OutConv to handle the Classification prediction and Localization prediction\n\nclass SSD_MultiHead(nn.Module):\n    def __init__(self, k, bias):\n        super().__init__()\n        self.drop = nn.Dropout(drop)\n        self.sconv0 = StdConv(512,256, stride=1, drop=drop)\n        self.sconv1 = StdConv(256,256, drop=drop)\n        self.sconv2 = StdConv(256,256, drop=drop)\n        self.sconv3 = StdConv(256,256, drop=drop)\n        self.out0 = OutConv(k, 256, bias)\n        self.out1 = OutConv(k, 256, bias)\n        self.out2 = OutConv(k, 256, bias)\n        self.out3 = OutConv(k, 256, bias)\n\n    def forward(self, x):\n        x = self.drop(F.relu(x))\n        x = self.sconv0(x)\n        x = self.sconv1(x)\n        o1c,o1l = self.out1(x)\n        x = self.sconv2(x)\n        o2c,o2l = self.out2(x)\n        x = self.sconv3(x)\n        o3c,o3l = self.out3(x)\n        return [torch.cat([o1c,o2c,o3c], dim=1),\n                torch.cat([o1l,o2l,o3l], dim=1)]\n\n\ndrop=0.4\n\n\nhead_reg4 = SSD_MultiHead(k, -4.)\n\n\nbody = create_body(resnet34(True))\nmodel = nn.Sequential(body, head_reg4)\n\n\nlearner = Learner(dls, model, loss_func=ssd_loss)\n\n\n# learner.lr_find()\n\n\nlearner.fit_one_cycle(20, 1e-3)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      time\n    \n  \n  \n    \n      0\n      79.482658\n      65.257332\n      00:24\n    \n    \n      1\n      77.919846\n      64.182114\n      00:24\n    \n    \n      2\n      75.337402\n      69.358673\n      00:24\n    \n    \n      3\n      70.927734\n      73.576935\n      00:24\n    \n    \n      4\n      65.866829\n      58.502281\n      00:24\n    \n    \n      5\n      61.796001\n      51.171406\n      00:24\n    \n    \n      6\n      58.571583\n      47.785007\n      00:24\n    \n    \n      7\n      55.809723\n      45.772766\n      00:24\n    \n    \n      8\n      53.606243\n      45.726265\n      00:25\n    \n    \n      9\n      51.751816\n      45.473743\n      00:24\n    \n    \n      10\n      49.946224\n      43.707134\n      00:24\n    \n    \n      11\n      48.457012\n      42.950340\n      00:25\n    \n    \n      12\n      46.938705\n      40.909351\n      00:24\n    \n    \n      13\n      45.661766\n      40.690815\n      00:24\n    \n    \n      14\n      44.419174\n      40.372437\n      00:25\n    \n    \n      15\n      43.232628\n      39.393692\n      00:24\n    \n    \n      16\n      42.119759\n      38.884872\n      00:24\n    \n    \n      17\n      41.290310\n      38.704178\n      00:24\n    \n    \n      18\n      40.546024\n      38.666664\n      00:24\n    \n    \n      19\n      39.970467\n      38.707432\n      00:24\n    \n  \n\n\n\n\nShow results\n\none_batch = dls.valid.one_batch()\nlearner.model.eval();\npred = learner.model(one_batch[0])\nb_clas, b_bb = pred\nx = one_batch[0]\n\nfig, axes = plt.subplots(3, 4, figsize=(16, 12))\nfor idx,ax in enumerate(axes.flat):\n    ima = x.permute(0,3,2,1).cpu()[idx]\n#     ima=md.val_ds.ds.denorm(x)[idx]\n    bbox,clas = get_y(y[0][idx], y[1][idx])\n    a_ic = actn_to_bb(b_bb[idx], anchors)\n    torch_gt(ax, ima, a_ic, b_clas[idx].max(1)[1], b_clas[idx].max(1)[0].sigmoid(), thresh=0.21)\n#plt.tight_layout()\nplt.subplots_adjust(wspace=0.15, hspace=0.15)\n\n\n\n\nThe result looks better than the simple version above"
  },
  {
    "objectID": "posts/SSD_base.html#non-maximum-suppression-nms",
    "href": "posts/SSD_base.html#non-maximum-suppression-nms",
    "title": "Object Detection from scratch - Single Shot Detector",
    "section": "Non Maximum Suppression (NMS)",
    "text": "Non Maximum Suppression (NMS)\nYou can see in the previous results, that having a lot of Anchor Boxes leads to many overlaps. You can use Non Maximum Suppression, a technique to choose one bounding box out of many overlapping ones\n\ndef nms(boxes, scores, overlap=0.5, top_k=100):\n    keep = scores.new(scores.size(0)).zero_().long()\n    if boxes.numel() == 0: return keep\n    x1 = boxes[:, 0]\n    y1 = boxes[:, 1]\n    x2 = boxes[:, 2]\n    y2 = boxes[:, 3]\n    area = torch.mul(x2 - x1, y2 - y1)\n    v, idx = scores.sort(0)  # sort in ascending order\n    idx = idx[-top_k:]  # indices of the top-k largest vals\n    xx1 = boxes.new()\n    yy1 = boxes.new()\n    xx2 = boxes.new()\n    yy2 = boxes.new()\n    w = boxes.new()\n    h = boxes.new()\n\n    count = 0\n    while idx.numel() > 0:\n        i = idx[-1]  # index of current largest val\n        keep[count] = i\n        count += 1\n        if idx.size(0) == 1: break\n        idx = idx[:-1]  # remove kept element from view\n        # load bboxes of next highest vals\n        torch.index_select(x1, 0, idx, out=xx1)\n        torch.index_select(y1, 0, idx, out=yy1)\n        torch.index_select(x2, 0, idx, out=xx2)\n        torch.index_select(y2, 0, idx, out=yy2)\n        # store element-wise max with next highest score\n        xx1 = torch.clamp(xx1, min=x1[i])\n        yy1 = torch.clamp(yy1, min=y1[i])\n        xx2 = torch.clamp(xx2, max=x2[i])\n        yy2 = torch.clamp(yy2, max=y2[i])\n        w.resize_as_(xx2)\n        h.resize_as_(yy2)\n        w = xx2 - xx1\n        h = yy2 - yy1\n        # check sizes of xx1 and xx2.. after each iteration\n        w = torch.clamp(w, min=0.0)\n        h = torch.clamp(h, min=0.0)\n        inter = w*h\n        # IoU = i / (area(a) + area(b) - i)\n        rem_areas = torch.index_select(area, 0, idx)  # load remaining areas)\n        union = (rem_areas - inter) + area[i]\n        IoU = inter/union  # store result in iou\n        # keep only elements with an IoU <= overlap\n        idx = idx[IoU.le(overlap)]\n    return keep, count\n\n\ndef show_nmf(idx):\n    ima = one_batch[0][idx].permute(2,1,0).cpu()\n    bbox = one_batch[1][idx].cuda()\n    clas = one_batch[2][idx].cuda()\n    bbox,clas = get_y(bbox,clas)\n    \n    a_ic = actn_to_bb(b_bb[idx], anchors)\n    clas_pr, clas_ids = b_clas[idx].max(1)\n    clas_pr = clas_pr.sigmoid()\n\n    conf_scores = b_clas[idx].sigmoid().t().data\n\n    out1,out2,cc = [],[],[]\n    for cl in range(1, len(conf_scores)):\n        c_mask = conf_scores[cl] > 0.25\n        if c_mask.sum() == 0: continue\n        scores = conf_scores[cl][c_mask]\n        l_mask = c_mask.unsqueeze(1).expand_as(a_ic)\n        boxes = a_ic[l_mask].view(-1, 4)\n        ids, count = nms(boxes.data, scores, 0.4, 50)\n        ids = ids[:count]\n        out1.append(scores[ids])\n        out2.append(boxes.data[ids])\n        cc.append([cl]*count)\n    if not cc:\n        print(f\"{i}: empty array\")\n        return\n    cc = torch.tensor(np.concatenate(cc))\n    out1 = torch.cat(out1)\n    out2 = torch.cat(out2)\n\n    fig, ax = plt.subplots(figsize=(8,8))\n    torch_gt(ax, ima, out2, cc, out1, 0.1)\n\n\nfor i in range(25, 35): show_nmf(i)\n\n25: empty array\n28: empty array\n31: empty array\n32: empty array"
  },
  {
    "objectID": "posts/tst_from_scratch.html",
    "href": "posts/tst_from_scratch.html",
    "title": "Transformer for timeseries",
    "section": "",
    "text": "Developing an Intuition for Transformers and Applying Them to Time Series Classification\nStruggling to learn a new deep learning architecture, such as Transformer, can be quite challenging. However, it doesn’t have to be so daunting. In this blog post, I will demonstrate a practical approach to start using a new architecture, specifically the Transformer. We will construct a basic Transformer architecture and progressively fine-tune it to achieve the performance of the TST architecture (A Transformer-based Framework for Multivariate Time Series Representation Learning).\nContent:\nReferences:\nYou’ll need fastai and tsai to run the code in this blog-post"
  },
  {
    "objectID": "posts/tst_from_scratch.html#dataset-facedetection",
    "href": "posts/tst_from_scratch.html#dataset-facedetection",
    "title": "Transformer for timeseries",
    "section": "Dataset: FaceDetection",
    "text": "Dataset: FaceDetection\n\n\n\n\n\n\nNote\n\n\n\nWhy Time Series? Although the Transformer originates from the NLP domain and outperforms all previous architectures, I believe that, for those not yet familiar with NLP, it is more advantageous to start with a domain that requires less preprocessing, such as Time Series. This way, we can focus our attention on understanding the architecture itself.\n\n\nIn this tutorial, we will be using a dataset from the well-known UEA & UCR Time Series repository. Although we won’t delve into the details of this dataset in this blog post, it’s worth mentioning its purpose. The objective is to classify whether a given MEG signal (Magnetoencephalography) represents a face or not. The input dimension is 144, and the sequence length is 62.\nI chose this dataset because it contains a reasonable amount of data (5,890 training instances and 3,524 testing instances) and has been used in a Transformer tutorial in the tsai repository. This ensures that we have a reliable reference model to aim to outperform.\nWe will utilize utility functions from the tsai and fastai libraries to facilitate our work and streamline the process.\n\nbatch_size, c_in, c_out, seq_len = 64, 144, 2, 62\nX, y, splits = get_UCR_data('FaceDetection', return_split=False)\n\nX_train = X[splits[0]]\ny_train = y[splits[0]]\nX_valid = X[splits[1]]\ny_valid = y[splits[1]]\n\nmean_trn = np.mean(X_train, axis=(0,2), keepdims=True)\nstd_trn = np.std(X_train, axis=(0,2), keepdims=True)\n\n\nclass TSDataset(Dataset):\n    \"\"\"TimeSeries DataSet for FaceDetection\"\"\"\n    def __init__(self, X, y):\n        super(TSDataset, self).__init__()\n        self.X = torch.tensor(X)\n        self.Y = torch.concat([torch.tensor([_y == '0'], dtype=int) for _y in y])\n    \n    def __len__(self): return len(self.X)\n    \n    def __getitem__(self, i):\n        return self.X[i], self.Y[i]\n\nThe following code demonstrates how to create data loaders for the training and validation sets:\n\ndset_train = TSDataset(X_train, y_train)\ndset_valid = TSDataset(X_valid, y_valid)\n\ndl_train = DataLoader(dset_train, batch_size=batch_size, shuffle=True)\ndl_valid = DataLoader(dset_valid, batch_size=batch_size, shuffle=False)\n\ndls = DataLoaders(dl_train, dl_valid) \ndls = dls.cuda()\n\n\nx, y = next(iter(dl_train))\n\n\nx.shape, y.shape\n\n(torch.Size([64, 144, 62]), torch.Size([64]))"
  },
  {
    "objectID": "posts/tst_from_scratch.html#reference-model",
    "href": "posts/tst_from_scratch.html#reference-model",
    "title": "Transformer for timeseries",
    "section": "Reference Model",
    "text": "Reference Model\nThe reference model we will be using is the TST (Transformer-based Framework for Multivariate Time Series Representation Learning) and implemented by the tsai library.\n\ndef evaluate_model(model, n_epoch=30):\n    learn = Learner(dls, model, loss_func=LabelSmoothingCrossEntropyFlat(), \n                    metrics=[RocAucBinary(), accuracy],  cbs=ShowGraphCallback2())\n    learn.fit_one_cycle(n_epoch, 1e-4) \n\n\nmodel = TST(c_in, c_out, seq_len, dropout=0.3, fc_dropout=0.9, n_heads=1, n_layers=1)\n\n\nevaluate_model(model)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      roc_auc_score\n      accuracy\n      time\n    \n  \n  \n    \n      0\n      0.943482\n      0.710201\n      0.503936\n      0.505675\n      00:02\n    \n    \n      1\n      0.959244\n      0.705551\n      0.515424\n      0.515607\n      00:01\n    \n    \n      2\n      0.940436\n      0.697859\n      0.534342\n      0.532350\n      00:01\n    \n    \n      3\n      0.900420\n      0.692391\n      0.563204\n      0.543133\n      00:01\n    \n    \n      4\n      0.872391\n      0.682138\n      0.601740\n      0.567537\n      00:01\n    \n    \n      5\n      0.873357\n      0.674679\n      0.632084\n      0.591090\n      00:01\n    \n    \n      6\n      0.827063\n      0.668141\n      0.662991\n      0.618331\n      00:01\n    \n    \n      7\n      0.802059\n      0.658147\n      0.682879\n      0.635925\n      00:01\n    \n    \n      8\n      0.753277\n      0.653781\n      0.693962\n      0.641884\n      00:01\n    \n    \n      9\n      0.744286\n      0.647927\n      0.698235\n      0.643303\n      00:01\n    \n    \n      10\n      0.727256\n      0.646205\n      0.705161\n      0.654370\n      00:01\n    \n    \n      11\n      0.699470\n      0.644024\n      0.707230\n      0.654654\n      00:01\n    \n    \n      12\n      0.707701\n      0.639246\n      0.713946\n      0.663167\n      00:01\n    \n    \n      13\n      0.677575\n      0.637510\n      0.716578\n      0.663734\n      00:01\n    \n    \n      14\n      0.690399\n      0.635938\n      0.720142\n      0.667991\n      00:01\n    \n    \n      15\n      0.651648\n      0.635806\n      0.720622\n      0.667991\n      00:01\n    \n    \n      16\n      0.639079\n      0.634356\n      0.722736\n      0.665153\n      00:01\n    \n    \n      17\n      0.672199\n      0.633124\n      0.724921\n      0.665437\n      00:01\n    \n    \n      18\n      0.639468\n      0.631378\n      0.728070\n      0.668558\n      00:01\n    \n    \n      19\n      0.638936\n      0.629368\n      0.728399\n      0.668558\n      00:01\n    \n    \n      20\n      0.625763\n      0.627779\n      0.731610\n      0.672247\n      00:01\n    \n    \n      21\n      0.619361\n      0.626804\n      0.732947\n      0.671680\n      00:01\n    \n    \n      22\n      0.633200\n      0.626732\n      0.732423\n      0.673666\n      00:01\n    \n    \n      23\n      0.633324\n      0.625232\n      0.735347\n      0.673099\n      00:01\n    \n    \n      24\n      0.639257\n      0.625497\n      0.733850\n      0.672531\n      00:01\n    \n    \n      25\n      0.626306\n      0.625547\n      0.733988\n      0.671396\n      00:01\n    \n    \n      26\n      0.616693\n      0.625246\n      0.734917\n      0.674234\n      00:01\n    \n    \n      27\n      0.627592\n      0.625567\n      0.733930\n      0.671396\n      00:01\n    \n    \n      28\n      0.616872\n      0.625370\n      0.734323\n      0.671680\n      00:01\n    \n    \n      29\n      0.617217\n      0.624772\n      0.734979\n      0.672815\n      00:01\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the simplicity for the reader, I do not use any normalization technique and training in lesser number of epochs than the original reference notebook. After 100 epochs, they reach an accuracy arount 0.70.1"
  },
  {
    "objectID": "posts/tst_from_scratch.html#baseline",
    "href": "posts/tst_from_scratch.html#baseline",
    "title": "Transformer for timeseries",
    "section": "Baseline",
    "text": "Baseline\nWe’ll begin our journey by exploring an LSTM model, which was commonly used for sequence classification in the pre-transformer era.\n\n\n\n\n\n\nNote\n\n\n\nNote: Observing the validation loss may lead you to believe that the model is overfitting. However, this is not the case, as the final metric (accuracy) continues to increase.\n\n\n\nmodel = LSTM(144,2,rnn_dropout=0.3, fc_dropout=0.3)\n\n\nevaluate_model(model)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      roc_auc_score\n      accuracy\n      time\n    \n  \n  \n    \n      0\n      0.698941\n      0.696725\n      0.522427\n      0.517026\n      00:02\n    \n    \n      1\n      0.696502\n      0.695753\n      0.526428\n      0.516175\n      00:01\n    \n    \n      2\n      0.694726\n      0.694219\n      0.533478\n      0.519013\n      00:01\n    \n    \n      3\n      0.691055\n      0.692617\n      0.541788\n      0.529228\n      00:01\n    \n    \n      4\n      0.691306\n      0.691157\n      0.549403\n      0.538309\n      00:01\n    \n    \n      5\n      0.684514\n      0.689195\n      0.559889\n      0.545119\n      00:01\n    \n    \n      6\n      0.680696\n      0.686942\n      0.571706\n      0.545970\n      00:01\n    \n    \n      7\n      0.668403\n      0.685266\n      0.581042\n      0.554767\n      00:01\n    \n    \n      8\n      0.659610\n      0.685288\n      0.585615\n      0.558456\n      00:01\n    \n    \n      9\n      0.656271\n      0.686517\n      0.588135\n      0.557889\n      00:01\n    \n    \n      10\n      0.651706\n      0.688422\n      0.589830\n      0.557889\n      00:01\n    \n    \n      11\n      0.630258\n      0.691245\n      0.590714\n      0.557605\n      00:01\n    \n    \n      12\n      0.620531\n      0.697241\n      0.591923\n      0.557605\n      00:01\n    \n    \n      13\n      0.606660\n      0.700341\n      0.597773\n      0.571793\n      00:01\n    \n    \n      14\n      0.595829\n      0.706305\n      0.598964\n      0.574347\n      00:01\n    \n    \n      15\n      0.581478\n      0.708097\n      0.604908\n      0.579455\n      00:01\n    \n    \n      16\n      0.570084\n      0.709881\n      0.610240\n      0.580590\n      00:01\n    \n    \n      17\n      0.560884\n      0.712225\n      0.612305\n      0.583144\n      00:01\n    \n    \n      18\n      0.570109\n      0.713588\n      0.616308\n      0.583995\n      00:01\n    \n    \n      19\n      0.558659\n      0.713829\n      0.616927\n      0.581725\n      00:01\n    \n    \n      20\n      0.545606\n      0.714969\n      0.618493\n      0.580874\n      00:01\n    \n    \n      21\n      0.541346\n      0.715872\n      0.620730\n      0.582293\n      00:01\n    \n    \n      22\n      0.538415\n      0.716904\n      0.622545\n      0.580590\n      00:01\n    \n    \n      23\n      0.535115\n      0.717429\n      0.623803\n      0.581725\n      00:01\n    \n    \n      24\n      0.531399\n      0.718325\n      0.623906\n      0.582577\n      00:01\n    \n    \n      25\n      0.540339\n      0.718253\n      0.624539\n      0.582009\n      00:01\n    \n    \n      26\n      0.539049\n      0.718644\n      0.624380\n      0.582293\n      00:01\n    \n    \n      27\n      0.529248\n      0.718712\n      0.624360\n      0.583144\n      00:01\n    \n    \n      28\n      0.524167\n      0.718756\n      0.624453\n      0.583712\n      00:01\n    \n    \n      29\n      0.524851\n      0.718751\n      0.624465\n      0.583712\n      00:01"
  },
  {
    "objectID": "posts/tst_from_scratch.html#our-tst",
    "href": "posts/tst_from_scratch.html#our-tst",
    "title": "Transformer for timeseries",
    "section": "Our TST",
    "text": "Our TST\n\n\n\nTransformer Architecture\n\n\nThe diagram above illustrates the Transformer architecture as presented in the “Attention is All You Need” paper. The breakthrough in this architecture is the Multi-Head Attention. The idea behind Attention is that if your model can focus on the most important parts of a long sequence, it can perform better without being affected by noise.\nHow does it work? Well, in my experience, when we are not very familiar with a new architecture, we shouldn’t focus too much on understanding every detail of the architecture. I spent a lot of time reading various tutorials, trying to grasp the clever idea behind this, only to realize that I still didn’t know how to apply it to a real case. I will attempt to cover building Self-Attention from scratch in a future blog post. However, in this one, we will start by learning how to use the Transformer module from PyTorch.\nWhat do we need to pay attention to here? We will mainly focus on the shapes of the input and output. The input maintains its shape after passing through the Transformer Encoder. Subsequently, the output is flattened and passed through a linear layer, which generates the appropriate number of classes for the given classification task\nOur first model as below is a very simple architecture with just one TransformerEncoder Layer and one Linear Layer\n\n\n\nSimple TST Artchitecture\n\n\n\nbatch_size, c_in, d_model, c_out, seq_len, dropout, fc_dropout  = 64, 144, 128, 2, 62, 0.7, 0.9\n\n\nclass OurTST(Module):\n    def __init__(self, c_in, c_out, seq_len, dropout):\n        self.c_in, self.c_out, self.seq_len = c_in, c_out, seq_len\n        encoder_layer = TransformerEncoderLayer(d_model=c_in, nhead=1, dropout=dropout)\n        self.transformer_encoder = TransformerEncoder(encoder_layer, num_layers=1)\n        self.head = nn.Linear(seq_len*c_in, c_out)\n    def forward(self, x):\n        o = x.swapaxes(1,2) # [bs,c_in,seq_len] -> [bs,seq_len,c_in]\n        o = self.transformer_encoder(o) # [bs,c_in,seq_len] -> [bs,c_in,seq_len]\n        o = o.reshape(o.shape[0], -1) # [bs,c_in,seq_len] -> [bs,c_in x seq_len]\n        o = self.head(o) # [bs,c_in x seq_len] -> [bs,]\n        return o\n\n\nmodel = OurTST(c_in, c_out, seq_len, 0.9)\n\n\nmodel\n\nOurTST(\n  (transformer_encoder): TransformerEncoder(\n    (layers): ModuleList(\n      (0): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=144, out_features=144, bias=True)\n        )\n        (linear1): Linear(in_features=144, out_features=2048, bias=True)\n        (dropout): Dropout(p=0.9, inplace=False)\n        (linear2): Linear(in_features=2048, out_features=144, bias=True)\n        (norm1): LayerNorm((144,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((144,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.9, inplace=False)\n        (dropout2): Dropout(p=0.9, inplace=False)\n      )\n    )\n  )\n  (head): Linear(in_features=8928, out_features=2, bias=True)\n)\n\n\n\nevaluate_model(model, 30)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      roc_auc_score\n      accuracy\n      time\n    \n  \n  \n    \n      0\n      0.771023\n      0.765103\n      0.501380\n      0.503405\n      00:01\n    \n    \n      1\n      0.767232\n      0.743445\n      0.526820\n      0.517877\n      00:01\n    \n    \n      2\n      0.760522\n      0.713145\n      0.577938\n      0.552781\n      00:01\n    \n    \n      3\n      0.718567\n      0.686044\n      0.636998\n      0.599603\n      00:01\n    \n    \n      4\n      0.707388\n      0.671847\n      0.679890\n      0.627128\n      00:01\n    \n    \n      5\n      0.667916\n      0.675715\n      0.702388\n      0.650114\n      00:01\n    \n    \n      6\n      0.646124\n      0.692107\n      0.713854\n      0.657492\n      00:01\n    \n    \n      7\n      0.626370\n      0.714405\n      0.720573\n      0.665153\n      00:01\n    \n    \n      8\n      0.623622\n      0.739222\n      0.721124\n      0.671396\n      00:01\n    \n    \n      9\n      0.597921\n      0.755921\n      0.722508\n      0.669410\n      00:01\n    \n    \n      10\n      0.595011\n      0.766809\n      0.725383\n      0.672815\n      00:01\n    \n    \n      11\n      0.574535\n      0.771822\n      0.729465\n      0.675936\n      00:01\n    \n    \n      12\n      0.573907\n      0.776058\n      0.732046\n      0.671112\n      00:01\n    \n    \n      13\n      0.570190\n      0.785060\n      0.733693\n      0.673950\n      00:01\n    \n    \n      14\n      0.552551\n      0.789218\n      0.734351\n      0.674234\n      00:01\n    \n    \n      15\n      0.575410\n      0.794398\n      0.736869\n      0.678774\n      00:01\n    \n    \n      16\n      0.563437\n      0.795728\n      0.738365\n      0.676788\n      00:01\n    \n    \n      17\n      0.563861\n      0.796549\n      0.739659\n      0.680193\n      00:01\n    \n    \n      18\n      0.538637\n      0.797076\n      0.740454\n      0.679909\n      00:01\n    \n    \n      19\n      0.548644\n      0.796367\n      0.741566\n      0.681896\n      00:01\n    \n    \n      20\n      0.549104\n      0.798111\n      0.741827\n      0.685017\n      00:01\n    \n    \n      21\n      0.539753\n      0.801571\n      0.741463\n      0.683598\n      00:01\n    \n    \n      22\n      0.542557\n      0.801905\n      0.742229\n      0.683031\n      00:01\n    \n    \n      23\n      0.547139\n      0.803032\n      0.742469\n      0.682463\n      00:01\n    \n    \n      24\n      0.532426\n      0.802947\n      0.743231\n      0.683598\n      00:01\n    \n    \n      25\n      0.524330\n      0.803357\n      0.743226\n      0.683314\n      00:01\n    \n    \n      26\n      0.525560\n      0.803959\n      0.743130\n      0.683598\n      00:01\n    \n    \n      27\n      0.534251\n      0.804135\n      0.743205\n      0.682747\n      00:01\n    \n    \n      28\n      0.541934\n      0.804315\n      0.743135\n      0.682747\n      00:01\n    \n    \n      29\n      0.527424\n      0.804290\n      0.743156\n      0.682747\n      00:01\n    \n  \n\n\n\n\n\n\n\n\n\nWell, our model outperforms the LSTM model and even better than the TST model after 30 epochs"
  },
  {
    "objectID": "posts/tst_from_scratch.html#upgrades",
    "href": "posts/tst_from_scratch.html#upgrades",
    "title": "Transformer for timeseries",
    "section": "Upgrades",
    "text": "Upgrades\nIn this section, I will discuss how we can build upon our basic Transformer architecture to achieve even greater results. We will explore several ideas inspired by the original paper and general deep learning concepts.\n1- Feature Standardizing:\nTo enhance neural network training, it is recommended that input data have a zero mean and unit standard deviation ( for more details, refer to this lesson from fast.ai). In line with the original paper, we employ feature standardization, which standardizes each feature separately.\nmean_trn = np.mean(X_train, axis=(0,2), keepdims=True)\nstd_trn = np.std(X_train, axis=(0,2), keepdims=True)\n... # In the Dataset\nself.X = (self.X - mean_trn)/std_trn\n2- Input Projection\nBefore feeding the input into the TransformerEncoder layer, it can be projected into another dimension, allowing us to control the input received by the TransformerEncoder. In general, using suitable techniques, a deeper network can potentially outperform a shallow one.\n    def __init__( ... )\n        self.W_P = nn.Linear(c_in, d_model)\n    def forward(self, x):\n        o = x.swapaxes(1, 2)  \n        o = self.W_P(o)  # Input Projection\n        \n3- Positional Encoding\nTransformers do not inherently capture the positional order of input data, which can be crucial for certain tasks. To embed this information, we can employ techniques such as passing the input through a specific function (e.g., a sinusoidal function) or creating learnable parameters for position (as implemented in our code).\n    def __init__( ... )\n        # Positional encoding\n        W_pos = torch.empty((seq_len, d_model), device=default_device())\n        nn.init.uniform_(W_pos, -0.02, 0.02)\n        self.W_pos = nn.Parameter(W_pos, requires_grad=True)\n    def forward(self, x):\n        o = x.swapaxes(1, 2)  \n        o = self.W_P(o)  \n        o = o + self.W_pos # Positional Encoding\n4- DropOut\nDeep neural networks can be prone to overfitting. To mitigate this issue, we can introduce dropout layers in our model, making it more resistant to overfitting. In our architecture, there are two types of dropout: one within the TransformerEncoder layer and another just before the final Linear layer.\n    def __init__( ... )\n        # Transformer encoder layers\n        encoder_layer = TransformerEncoderLayer(d_model=d_model, nhead=1, dropout=drop_out) # dropout inside Transformer Layer\n        self.transformer_encoder = TransformerEncoder(encoder_layer, num_layers=n_layers)\n\n        self.head = nn.Sequential(\n            nn.GELU(),\n            Flatten(),\n            nn.Dropout(fc_dropout), # fully connected dropout\n            nn.Linear(seq_len * d_model, c_out)\n        )\n\nbatch_size, c_in, d_model, c_out, seq_len,fc_dropout = 64, 144, 128, 2, 62, 0.9\nX, y, splits = get_UCR_data('FaceDetection', return_split=False)\n\nX_train = X[splits[0]]\ny_train = y[splits[0]]\nX_valid = X[splits[1]]\ny_valid = y[splits[1]]\n\nmean_trn = np.mean(X_train, axis=(0,2), keepdims=True)\nstd_trn = np.std(X_train, axis=(0,2), keepdims=True)\n\n\nclass TSDataset(Dataset):\n    \"\"\"TimeSeries DataSet for FaceDetection\"\"\"\n    def __init__(self, X, y):\n        super(TSDataset, self).__init__()\n        self.X = torch.tensor(X)\n        self.X = (self.X - mean_trn)/std_trn\n        self.Y = torch.concat([torch.tensor([_y == '0'], dtype=int) for _y in y])\n    \n    def __len__(self): return len(self.X)\n    \n    def __getitem__(self, i):\n        return self.X[i], self.Y[i]\n\n\nclass OurTST(Module):\n    def __init__(self, c_in, c_out, d_model, seq_len, n_layers, drop_out, fc_dropout):\n        self.c_in, self.c_out, self.seq_len = c_in, c_out, seq_len\n        self.W_P = nn.Linear(c_in, d_model)\n\n        # Positional encoding\n        W_pos = torch.empty((seq_len, d_model), device=default_device())\n        nn.init.uniform_(W_pos, -0.02, 0.02)\n        self.W_pos = nn.Parameter(W_pos, requires_grad=True)\n\n        # Transformer encoder layers\n        encoder_layer = TransformerEncoderLayer(d_model=d_model, nhead=1, dropout=drop_out)\n        self.transformer_encoder = TransformerEncoder(encoder_layer, num_layers=n_layers)\n\n        self.head = nn.Sequential(\n            nn.GELU(),\n            Flatten(),\n            nn.Dropout(fc_dropout),\n            nn.Linear(seq_len * d_model, c_out)\n        )\n\n    def forward(self, x):\n        o = x.swapaxes(1, 2)  # [bs,c_in,seq_len] -> [bs,seq_len,c_in]\n        o = self.W_P(o)  # [bs,seq_len,c_in] -> [bs,seq_len,d_model]\n        o = o + self.W_pos\n        o = self.transformer_encoder(o)  # [bs, seq_len, d_model] -> [bs, seq_len, d_model]\n        o = o.contiguous()\n        o = self.head(o)  # [bs,seq_len x d_model] -> [bs,c_out]\n        return o\n\n\nmodel = OurTST(c_in, c_out, d_model, seq_len, 3, 0.4 ,0.9)\n\n\nevaluate_model(model, n_epoch=30)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      roc_auc_score\n      accuracy\n      time\n    \n  \n  \n    \n      0\n      0.925684\n      0.714104\n      0.499395\n      0.500000\n      00:02\n    \n    \n      1\n      0.941063\n      0.708397\n      0.513332\n      0.510499\n      00:02\n    \n    \n      2\n      0.910563\n      0.697380\n      0.547459\n      0.532066\n      00:02\n    \n    \n      3\n      0.875563\n      0.684338\n      0.586375\n      0.553916\n      00:02\n    \n    \n      4\n      0.788294\n      0.675705\n      0.634576\n      0.583144\n      00:02\n    \n    \n      5\n      0.729792\n      0.669882\n      0.668022\n      0.613224\n      00:02\n    \n    \n      6\n      0.698079\n      0.661823\n      0.690192\n      0.640182\n      00:02\n    \n    \n      7\n      0.678686\n      0.650137\n      0.703406\n      0.646141\n      00:02\n    \n    \n      8\n      0.669151\n      0.639466\n      0.713121\n      0.653235\n      00:02\n    \n    \n      9\n      0.640111\n      0.631399\n      0.720097\n      0.656924\n      00:02\n    \n    \n      10\n      0.636223\n      0.625919\n      0.728919\n      0.664586\n      00:02\n    \n    \n      11\n      0.609655\n      0.623980\n      0.735162\n      0.663734\n      00:02\n    \n    \n      12\n      0.600260\n      0.626050\n      0.739055\n      0.669694\n      00:02\n    \n    \n      13\n      0.595127\n      0.623003\n      0.741405\n      0.671396\n      00:02\n    \n    \n      14\n      0.592127\n      0.624625\n      0.742487\n      0.675369\n      00:02\n    \n    \n      15\n      0.572983\n      0.630688\n      0.746745\n      0.677923\n      00:02\n    \n    \n      16\n      0.573267\n      0.628453\n      0.747862\n      0.682463\n      00:02\n    \n    \n      17\n      0.564986\n      0.627425\n      0.749735\n      0.680761\n      00:02\n    \n    \n      18\n      0.567010\n      0.626230\n      0.751817\n      0.684733\n      00:02\n    \n    \n      19\n      0.555792\n      0.628040\n      0.751030\n      0.680761\n      00:02\n    \n    \n      20\n      0.546230\n      0.633149\n      0.751046\n      0.683031\n      00:02\n    \n    \n      21\n      0.547146\n      0.631326\n      0.752979\n      0.684166\n      00:02\n    \n    \n      22\n      0.548416\n      0.632791\n      0.752416\n      0.684449\n      00:02\n    \n    \n      23\n      0.548463\n      0.634959\n      0.752966\n      0.682747\n      00:02\n    \n    \n      24\n      0.541696\n      0.634788\n      0.753698\n      0.683598\n      00:02\n    \n    \n      25\n      0.541297\n      0.634837\n      0.753692\n      0.684733\n      00:02\n    \n    \n      26\n      0.530234\n      0.635058\n      0.753956\n      0.683314\n      00:02\n    \n    \n      27\n      0.539544\n      0.635267\n      0.753939\n      0.683031\n      00:02\n    \n    \n      28\n      0.546123\n      0.635198\n      0.753946\n      0.683314\n      00:02\n    \n    \n      29\n      0.535531\n      0.635230\n      0.753916\n      0.683314\n      00:02\n    \n  \n\n\n\n\n\n\n\n\n\nLet’s try training with more epochs. In the following example, we will train for 100 epochs, which is the same as in this tutorial from tsai\n\nmodel = OurTST(c_in, c_out, d_model, seq_len, 3, 0.6 ,0.9)\nevaluate_model(model, n_epoch=100)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      roc_auc_score\n      accuracy\n      time\n    \n  \n  \n    \n      0\n      0.986113\n      0.723611\n      0.495537\n      0.501986\n      00:02\n    \n    \n      1\n      0.985938\n      0.715433\n      0.500191\n      0.498581\n      00:02\n    \n    \n      2\n      0.959804\n      0.714567\n      0.505571\n      0.503121\n      00:02\n    \n    \n      3\n      0.935837\n      0.711624\n      0.512527\n      0.509081\n      00:02\n    \n    \n      4\n      0.949967\n      0.708520\n      0.520180\n      0.511351\n      00:02\n    \n    \n      5\n      0.938500\n      0.703618\n      0.531381\n      0.521283\n      00:02\n    \n    \n      6\n      0.914983\n      0.698704\n      0.546194\n      0.528944\n      00:02\n    \n    \n      7\n      0.916452\n      0.693311\n      0.562272\n      0.545687\n      00:02\n    \n    \n      8\n      0.863562\n      0.688229\n      0.581601\n      0.557605\n      00:02\n    \n    \n      9\n      0.825720\n      0.684290\n      0.603750\n      0.570658\n      00:02\n    \n    \n      10\n      0.814094\n      0.675768\n      0.626344\n      0.585982\n      00:02\n    \n    \n      11\n      0.770269\n      0.671013\n      0.646063\n      0.598751\n      00:02\n    \n    \n      12\n      0.734332\n      0.666361\n      0.663611\n      0.621169\n      00:02\n    \n    \n      13\n      0.728247\n      0.666351\n      0.673837\n      0.612372\n      00:02\n    \n    \n      14\n      0.703636\n      0.659145\n      0.688090\n      0.640749\n      00:02\n    \n    \n      15\n      0.695590\n      0.652872\n      0.696829\n      0.652667\n      00:02\n    \n    \n      16\n      0.685371\n      0.648839\n      0.701994\n      0.639330\n      00:02\n    \n    \n      17\n      0.677378\n      0.640827\n      0.706331\n      0.654370\n      00:02\n    \n    \n      18\n      0.659291\n      0.637410\n      0.711023\n      0.658059\n      00:02\n    \n    \n      19\n      0.654945\n      0.636273\n      0.717630\n      0.659478\n      00:02\n    \n    \n      20\n      0.642616\n      0.639057\n      0.721688\n      0.658343\n      00:02\n    \n    \n      21\n      0.629476\n      0.639091\n      0.728980\n      0.667991\n      00:02\n    \n    \n      22\n      0.618588\n      0.642530\n      0.735525\n      0.673099\n      00:02\n    \n    \n      23\n      0.612620\n      0.642298\n      0.741208\n      0.671680\n      00:02\n    \n    \n      24\n      0.606063\n      0.644125\n      0.745705\n      0.677639\n      00:02\n    \n    \n      25\n      0.597042\n      0.653301\n      0.746442\n      0.673099\n      00:02\n    \n    \n      26\n      0.591410\n      0.649610\n      0.749507\n      0.680761\n      00:02\n    \n    \n      27\n      0.599989\n      0.644790\n      0.752807\n      0.684449\n      00:02\n    \n    \n      28\n      0.580830\n      0.655860\n      0.755328\n      0.683598\n      00:02\n    \n    \n      29\n      0.579203\n      0.667195\n      0.754020\n      0.683314\n      00:02\n    \n    \n      30\n      0.576821\n      0.666351\n      0.757188\n      0.679342\n      00:02\n    \n    \n      31\n      0.571501\n      0.670810\n      0.757713\n      0.688138\n      00:02\n    \n    \n      32\n      0.577291\n      0.670262\n      0.760897\n      0.689841\n      00:02\n    \n    \n      33\n      0.565669\n      0.672775\n      0.759541\n      0.687003\n      00:02\n    \n    \n      34\n      0.581174\n      0.681387\n      0.757111\n      0.685868\n      00:02\n    \n    \n      35\n      0.571533\n      0.672656\n      0.760768\n      0.689841\n      00:02\n    \n    \n      36\n      0.568005\n      0.684501\n      0.759986\n      0.685868\n      00:02\n    \n    \n      37\n      0.558923\n      0.689911\n      0.758634\n      0.687287\n      00:02\n    \n    \n      38\n      0.544595\n      0.691652\n      0.760238\n      0.692111\n      00:02\n    \n    \n      39\n      0.547767\n      0.690527\n      0.760010\n      0.690976\n      00:02\n    \n    \n      40\n      0.547662\n      0.695285\n      0.760551\n      0.694949\n      00:02\n    \n    \n      41\n      0.545006\n      0.692685\n      0.761823\n      0.692111\n      00:02\n    \n    \n      42\n      0.557433\n      0.701815\n      0.761501\n      0.696084\n      00:02\n    \n    \n      43\n      0.556936\n      0.702578\n      0.758627\n      0.687003\n      00:02\n    \n    \n      44\n      0.542515\n      0.713648\n      0.757356\n      0.688422\n      00:02\n    \n    \n      45\n      0.540261\n      0.718203\n      0.757706\n      0.686152\n      00:02\n    \n    \n      46\n      0.531610\n      0.718681\n      0.758163\n      0.692111\n      00:02\n    \n    \n      47\n      0.525029\n      0.722788\n      0.760487\n      0.685868\n      00:02\n    \n    \n      48\n      0.531557\n      0.714598\n      0.761604\n      0.695516\n      00:02\n    \n    \n      49\n      0.528427\n      0.720070\n      0.757874\n      0.688422\n      00:02\n    \n    \n      50\n      0.533936\n      0.731660\n      0.760347\n      0.694381\n      00:02\n    \n    \n      51\n      0.532107\n      0.734147\n      0.758814\n      0.687571\n      00:02\n    \n    \n      52\n      0.528784\n      0.726680\n      0.761935\n      0.690125\n      00:02\n    \n    \n      53\n      0.525845\n      0.736096\n      0.760733\n      0.694665\n      00:02\n    \n    \n      54\n      0.535664\n      0.743276\n      0.758939\n      0.689841\n      00:02\n    \n    \n      55\n      0.521018\n      0.735471\n      0.761122\n      0.691544\n      00:02\n    \n    \n      56\n      0.523641\n      0.729754\n      0.761421\n      0.692963\n      00:02\n    \n    \n      57\n      0.525150\n      0.735508\n      0.761838\n      0.689274\n      00:02\n    \n    \n      58\n      0.516105\n      0.739418\n      0.763721\n      0.699205\n      00:02\n    \n    \n      59\n      0.511782\n      0.742465\n      0.761415\n      0.694098\n      00:02\n    \n    \n      60\n      0.523468\n      0.742341\n      0.760741\n      0.695800\n      00:02\n    \n    \n      61\n      0.520403\n      0.743021\n      0.761011\n      0.694381\n      00:02\n    \n    \n      62\n      0.514355\n      0.741946\n      0.762210\n      0.700624\n      00:02\n    \n    \n      63\n      0.511770\n      0.744806\n      0.762579\n      0.694949\n      00:02\n    \n    \n      64\n      0.514207\n      0.747035\n      0.761403\n      0.694665\n      00:02\n    \n    \n      65\n      0.504732\n      0.747706\n      0.760959\n      0.689841\n      00:02\n    \n    \n      66\n      0.507337\n      0.746426\n      0.761844\n      0.693530\n      00:02\n    \n    \n      67\n      0.502984\n      0.753452\n      0.761258\n      0.696084\n      00:02\n    \n    \n      68\n      0.503284\n      0.748423\n      0.762783\n      0.694381\n      00:02\n    \n    \n      69\n      0.510511\n      0.748741\n      0.762635\n      0.697219\n      00:02\n    \n    \n      70\n      0.502065\n      0.757950\n      0.761098\n      0.690692\n      00:02\n    \n    \n      71\n      0.499528\n      0.758117\n      0.760646\n      0.696084\n      00:02\n    \n    \n      72\n      0.508516\n      0.758758\n      0.759330\n      0.694665\n      00:02\n    \n    \n      73\n      0.497975\n      0.761433\n      0.759172\n      0.694098\n      00:02\n    \n    \n      74\n      0.497121\n      0.762476\n      0.758746\n      0.695233\n      00:02\n    \n    \n      75\n      0.494813\n      0.761791\n      0.759932\n      0.696368\n      00:02\n    \n    \n      76\n      0.496914\n      0.761701\n      0.760781\n      0.698922\n      00:02\n    \n    \n      77\n      0.492758\n      0.762113\n      0.760283\n      0.697219\n      00:02\n    \n    \n      78\n      0.495429\n      0.760835\n      0.760252\n      0.698354\n      00:02\n    \n    \n      79\n      0.500510\n      0.766248\n      0.759687\n      0.695800\n      00:02\n    \n    \n      80\n      0.491652\n      0.764638\n      0.760198\n      0.693530\n      00:02\n    \n    \n      81\n      0.495746\n      0.766025\n      0.760069\n      0.694098\n      00:02\n    \n    \n      82\n      0.492518\n      0.767861\n      0.759896\n      0.694381\n      00:02\n    \n    \n      83\n      0.492122\n      0.767575\n      0.759625\n      0.695800\n      00:02\n    \n    \n      84\n      0.495317\n      0.768247\n      0.758977\n      0.695233\n      00:02\n    \n    \n      85\n      0.503044\n      0.767743\n      0.759250\n      0.696935\n      00:02\n    \n    \n      86\n      0.488295\n      0.768618\n      0.759364\n      0.696368\n      00:02\n    \n    \n      87\n      0.495461\n      0.769804\n      0.759051\n      0.694381\n      00:02\n    \n    \n      88\n      0.499347\n      0.769520\n      0.758997\n      0.695233\n      00:02\n    \n    \n      89\n      0.511932\n      0.769175\n      0.758995\n      0.695233\n      00:02\n    \n    \n      90\n      0.504696\n      0.769521\n      0.758882\n      0.694949\n      00:02\n    \n    \n      91\n      0.491524\n      0.769784\n      0.758762\n      0.694098\n      00:02\n    \n    \n      92\n      0.498932\n      0.769638\n      0.758810\n      0.694665\n      00:02\n    \n    \n      93\n      0.493265\n      0.770175\n      0.758754\n      0.694665\n      00:02\n    \n    \n      94\n      0.497908\n      0.770099\n      0.758764\n      0.694665\n      00:02\n    \n    \n      95\n      0.486489\n      0.769981\n      0.758742\n      0.694665\n      00:02\n    \n    \n      96\n      0.496604\n      0.770035\n      0.758724\n      0.694665\n      00:02\n    \n    \n      97\n      0.485646\n      0.769963\n      0.758733\n      0.694381\n      00:02\n    \n    \n      98\n      0.499033\n      0.769941\n      0.758741\n      0.694381\n      00:02\n    \n    \n      99\n      0.490694\n      0.769939\n      0.758742\n      0.694381\n      00:02\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThere may be differences between the implementation of the Transformer in pytorch and tsai (for example, pytorch uses LayerNorm in the TransformerEncoder layer, which is popular in NLP, while tsai employs BatchNorm)"
  },
  {
    "objectID": "posts/Learner.html",
    "href": "posts/Learner.html",
    "title": "Redesign your Training Loop with CallBacks",
    "section": "",
    "text": "Building a Flexible Training Loop via a system of callbacks - fastai course part 2 2022"
  },
  {
    "objectID": "posts/Learner.html#minimalist-training-loop",
    "href": "posts/Learner.html#minimalist-training-loop",
    "title": "Redesign your Training Loop with CallBacks",
    "section": "Minimalist Training Loop",
    "text": "Minimalist Training Loop\ndef fit(epochs, model, loss_func, opt, train_dl, valid_dl):\n    for epoch in range(epochs):\n        model.train()\n        for xb,yb in train_dl:\n            loss = loss_func(model(xb), yb)\n            loss.backward()\n            opt.step()\n            opt.zero_grad()\n\n        model.eval()\n        with torch.no_grad():\n            tot_loss,tot_acc,count = 0.,0.,0\n            for xb,yb in valid_dl:\n                pred = model(xb)\n                n = len(xb)\n                count += n\n                tot_loss += loss_func(pred,yb).item()*n\n                tot_acc  += accuracy (pred,yb).item()*n\n        print(epoch, tot_loss/count, tot_acc/count)\n    return tot_loss/count, tot_acc/count\nIf you are a data scientist, you might be familiar with the code above - a minimalist training loop. It does a couple of things:\n\nTraining through a number of epochs\nIn each epoch, loop through every batch\nIn each batch, depending on if the model is training or validating, having different behaviors\n\nHowever, most of the time, we won’t stop here … What if 🤔 :\n\nThe dataset is unbalanced, we should better adding more metrics than just accuracy, maybe F1, ROCAUC, …\nYou want to log the result: in a file/show it in a realtime graph / push it on WandB\nEarly Stopping, Save Best Model, and Much more …\n\nThen you will add more and more ideas in the training loop, to a point that changing anything becomes a headache. If you want to reactivate an old feature that you’ve tried last week, combine several ideas, … Big chance that you will just create a new notebook with Learner-Copy1, Learner-Copy2, Learner-CopyN, …\nLet’s design a new Flexible Training Loop where we keep it as simple as possible but also having a full power of plugging new ideas via callbacks.\n\n\n\n\n\n\nNote\n\n\n\nCallback here is not a python feature but a design concept. It just mean triggering a function when you’ve done something"
  },
  {
    "objectID": "posts/Learner.html#a-learner-with-callbacks",
    "href": "posts/Learner.html#a-learner-with-callbacks",
    "title": "Redesign your Training Loop with CallBacks",
    "section": "A Learner with CallBacks",
    "text": "A Learner with CallBacks\nThere are 3 core pieces of a training loop\n\nFit\nEpoch\nBatch\n\nWe will wrap around each event here with a before and after methods (so before_batch after_batch before_epoch after_epoch before_fit after_fit) with full access to the Learner (which includes everything: the model, optimizer, dataloader, … ).\nclass Learner():\n    def __init__(self, model, dls, loss_func, lr, cbs, opt_func=optim.SGD): fc.store_attr()\n\n    def one_batch(self):\n        self.preds = self.model(self.batch[0])\n        self.loss = self.loss_func(self.preds, self.batch[1])\n        if self.model.training:\n            self.loss.backward()\n            self.opt.step()\n            self.opt.zero_grad()\n\n    def one_epoch(self, train):\n        self.model.train(train)\n        self.dl = self.dls.train if train else self.dls.valid\n        try:\n            self.callback('before_epoch')\n            for self.iter,self.batch in enumerate(self.dl):\n                try:\n                    self.callback('before_batch')\n                    self.one_batch()\n                    self.callback('after_batch')\n                except CancelBatchException: pass\n            self.callback('after_epoch')\n        except CancelEpochException: pass\n    \n    def fit(self, n_epochs):\n        self.n_epochs = n_epochs\n        self.epochs = range(n_epochs)\n        self.opt = self.opt_func(self.model.parameters(), self.lr)\n        try:\n            self.callback('before_fit')\n            for self.epoch in self.epochs:\n                self.one_epoch(True)\n                self.one_epoch(False)\n            self.callback('after_fit')\n        except CancelFitException: pass\n\n    def callback(self, method_nm): run_cbs(self.cbs, method_nm, self)\n\n\n\n\n\n\nNote\n\n\n\nThe exception here is for adding more control - exit an event when we need\n\n\nPause for a second and imagine if you want to write a simple DeviceCallBack, what will you do ? …\nSo:\n\nBefore_fit: Model -> CUDA\nBefore_batch: (Input, Label) -> CUDA\n\n# from fastai course 2022 p2\nclass DeviceCB(Callback):\n    def __init__(self, device=def_device): fc.store_attr()\n    def before_fit(self, learn):\n        if hasattr(learn.model, 'to'): learn.model.to(self.device)\n    def before_batch(self, learn): learn.batch = to_device(learn.batch, device=self.device)\nWhat about a MetricsCallback based on torcheval (a library from Pytorch for model evaluations). Well, we might need some basic steps below:\n\nBefore_epoch: Reset all metrics\nAfter_batch: Update new values to metrics ( accuracy, loss, … per batch )\nAfter_epoch: Compute the final metrics for this epoch (Ex: Weight Average of Accuracy based on a list of accuracy per batch). Then print the result, push it on WandB, …\n\n# from fastai course 2022 p2\nclass MetricsCB(Callback):\n    def __init__(self, *ms, **metrics):\n        for o in ms: metrics[type(o).__name__] = o\n        self.metrics = metrics\n        self.all_metrics = copy(metrics)\n        self.all_metrics['loss'] = self.loss = Mean()\n\n    def _log(self, d): \n        print(d)\n        wandb.log(log)\n        \n    def before_fit(self, learn): learn.metrics = self\n    def before_epoch(self, learn): [o.reset() for o in self.all_metrics.values()]\n\n    def after_epoch(self, learn):\n        log = {k:f'{v.compute():.3f}' for k,v in self.all_metrics.items()}\n        log['epoch'] = learn.epoch\n        log['train'] = 'train' if learn.model.training else 'eval'\n        self._log(log)\n        \n\n    def after_batch(self, learn):\n        x,y,*_ = to_cpu(learn.batch)\n        for m in self.metrics.values(): m.update(to_cpu(learn.preds), y)\n        self.loss.update(to_cpu(learn.loss), weight=len(x))\n\n\n\nDiagram of how to plug MetricsCB and DeviceCB to Learner\n\n\n\n\n\nWandB Log"
  },
  {
    "objectID": "posts/Learner.html#how-to-go-even-further",
    "href": "posts/Learner.html#how-to-go-even-further",
    "title": "Redesign your Training Loop with CallBacks",
    "section": "How to go even further?",
    "text": "How to go even further?\nWe don’t want to repeat ourselves so the before and after in the previous Learner version can be refactored. We can use @decorator or @contextmanager for wrapping things before and after the event.\nThe fastai course experiment with this idea further with even considering 'predict','get_loss','backward','step','zero_grad' as events. It means there is nothing that we can not control here. An example of when it is useful is experimenting with a Momentum Learner by rewriting the zero_grad\n#|export\nclass MomentumLearner(TrainLearner):\n    def __init__(self, model, dls, loss_func, lr=None, cbs=None, opt_func=optim.SGD, mom=0.85):\n        self.mom = mom\n        super().__init__(model, dls, loss_func, lr, cbs, opt_func)\n\n    def zero_grad(self):\n        with torch.no_grad():\n            for p in self.model.parameters(): p.grad *= self.mom\n     \nInstead of forgetting all the previous gradients by assigning them to zero, we can multiply them by a number < 1. So in the next update, we also take into account what we’ve trained before ( or momentum )."
  },
  {
    "objectID": "posts/cryceleb.html",
    "href": "posts/cryceleb.html",
    "title": "CryCeleb2023 Diary",
    "section": "",
    "text": "My Experiments to winning the CryCeleb Competition (Audio Verification)\nThis blog post is to document my journey to winning the CryCeleb competition hosted by HuggingFace and Ubenwa, which focuses on verifying babies using their cry sound. However, I must admit that:\nWhy?\nAdvice for future competitions:"
  },
  {
    "objectID": "posts/cryceleb.html#final-experiment",
    "href": "posts/cryceleb.html#final-experiment",
    "title": "CryCeleb2023 Diary",
    "section": "Final Experiment",
    "text": "Final Experiment\n\n!pip install -qq speechbrain\n!pip install -qq seaborn\n!pip install -Uqq huggingface_hub\n!pip install -Uqq fastai\n!pip install -Uqq wandb\n\n\nimport speechbrain as sb\nfrom speechbrain.pretrained import SpeakerRecognition, EncoderClassifier\nfrom speechbrain.dataio.dataio import read_audio\nfrom speechbrain.utils.metric_stats import EER\nimport pandas as pd\nimport numpy as np\nimport torch\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom huggingface_hub import hf_hub_download\nfrom tqdm.notebook import tqdm\nimport random\nfrom speechbrain.processing.features import InputNormalization\nfrom speechbrain.lobes.features import Fbank\nimport seaborn as sns\nfrom itertools import combinations, product\n\n\nfrom fastai.vision.all import *\nfrom torch.utils.data import Dataset, DataLoader\n\n\nimport wandb\nfrom fastai.callback.wandb import *\nwandb.init(\"cryceleb\")\n\nwandb: Currently logged in as: dhoa. Use `wandb login --relogin` to force relogin\n\n\nTracking run with wandb version 0.15.5\n\n\nRun data is saved locally in /home/wandb/run-20230710_211533-s4lz49ck\n\n\nSyncing run hearty-bush-20 to Weights & Biases (docs)\n\n\n View project at https://wandb.ai/dhoa/uncategorized\n\n\n View run at https://wandb.ai/dhoa/uncategorized/runs/s4lz49ck\n\n\nDisplay W&B run\n\n\n\n# read metadata\nmetadata = pd.read_csv(f'metadata.csv', dtype={'baby_id':str, 'chronological_index':str})\ndev_metadata = metadata.loc[metadata['split']=='dev'].copy()\n# read sample submission\nsample_submission = pd.read_csv(f\"sample_submission.csv\") # scores are unfiorm random\n# read verification pairs\ndev_pairs = pd.read_csv(f\"dev_pairs.csv\", dtype={'baby_id_B':str, 'baby_id_D':str})\ntest_pairs = pd.read_csv(f\"test_pairs.csv\")\n\ndisplay(metadata.head().style.set_caption(f\"metadata\").set_table_styles([{'selector': 'caption','props': [('font-size', '20px')]}]))\ndisplay(dev_pairs.head().style.set_caption(f\"dev_pairs\").set_table_styles([{'selector': 'caption','props': [('font-size', '20px')]}]))\ndisplay(test_pairs.head().style.set_caption(f\"test_pairs\").set_table_styles([{'selector': 'caption','props': [('font-size', '20px')]}]))\ndisplay(sample_submission.head().style.set_caption(f\"sample_submission\").set_table_styles([{'selector': 'caption','props': [('font-size', '20px')]}]))\n\n\n\n\n  metadata\n  \n    \n       \n      baby_id\n      period\n      duration\n      split\n      chronological_index\n      file_name\n      file_id\n    \n  \n  \n    \n      0\n      0694\n      B\n      1.320000\n      dev\n      000\n      audio/dev/0694/B/0694_B_000.wav\n      0694_B_000\n    \n    \n      1\n      0694\n      B\n      0.940000\n      dev\n      001\n      audio/dev/0694/B/0694_B_001.wav\n      0694_B_001\n    \n    \n      2\n      0694\n      B\n      0.880000\n      dev\n      002\n      audio/dev/0694/B/0694_B_002.wav\n      0694_B_002\n    \n    \n      3\n      0694\n      B\n      1.130000\n      dev\n      003\n      audio/dev/0694/B/0694_B_003.wav\n      0694_B_003\n    \n    \n      4\n      0694\n      B\n      1.180000\n      dev\n      004\n      audio/dev/0694/B/0694_B_004.wav\n      0694_B_004\n    \n  \n\n\n\n\n\n\n  dev_pairs\n  \n    \n       \n      baby_id_B\n      baby_id_D\n      id\n      label\n    \n  \n  \n    \n      0\n      0133\n      0611\n      0133B_0611D\n      0\n    \n    \n      1\n      0593\n      0584\n      0593B_0584D\n      0\n    \n    \n      2\n      0094\n      0292\n      0094B_0292D\n      0\n    \n    \n      3\n      0563\n      0094\n      0563B_0094D\n      0\n    \n    \n      4\n      0122\n      0694\n      0122B_0694D\n      0\n    \n  \n\n\n\n\n\n\n  test_pairs\n  \n    \n       \n      baby_id_B\n      baby_id_D\n      id\n    \n  \n  \n    \n      0\n      anonymous027\n      anonymous212\n      anonymous027B_anonymous212D\n    \n    \n      1\n      anonymous035\n      anonymous225\n      anonymous035B_anonymous225D\n    \n    \n      2\n      anonymous029\n      anonymous288\n      anonymous029B_anonymous288D\n    \n    \n      3\n      anonymous001\n      anonymous204\n      anonymous001B_anonymous204D\n    \n    \n      4\n      anonymous075\n      anonymous244\n      anonymous075B_anonymous244D\n    \n  \n\n\n\n\n\n\n  sample_submission\n  \n    \n       \n      id\n      score\n    \n  \n  \n    \n      0\n      anonymous027B_anonymous212D\n      0.548814\n    \n    \n      1\n      anonymous035B_anonymous225D\n      0.715189\n    \n    \n      2\n      anonymous029B_anonymous288D\n      0.602763\n    \n    \n      3\n      anonymous001B_anonymous204D\n      0.544883\n    \n    \n      4\n      anonymous075B_anonymous244D\n      0.423655"
  },
  {
    "objectID": "posts/cryceleb.html#ubenwa-baseline",
    "href": "posts/cryceleb.html#ubenwa-baseline",
    "title": "CryCeleb2023 Diary",
    "section": "Ubenwa Baseline",
    "text": "Ubenwa Baseline\nI reproduced the baseline from code, excluding the config file. This facilitated easier customization of the code according to my needs, and allowed for the use of a more high level framework like fastai. The following are some code snippets from speechbrain for the ecapa model.\n\nclass InputNormalizationFixedSize(InputNormalization):\n    def forward(self, x):\n        N_batches = x.shape[0]\n\n        current_means = []\n        current_stds = []\n\n        for snt_id in range(N_batches):\n\n            # Avoiding padded time steps\n            actual_size = torch.round(torch.tensor(1) * x.shape[1]).int()\n\n            # computing statistics\n            current_mean, current_std = self._compute_current_stats(\n                x[snt_id, 0:actual_size, ...]\n            )\n\n            current_means.append(current_mean)\n            current_stds.append(current_std)\n\n            if self.norm_type == \"sentence\":\n\n                x[snt_id] = (x[snt_id] - current_mean.data) / current_std.data\n        return x\n\n\nnormalizer = InputNormalizationFixedSize(norm_type='sentence', std_norm=False)\n\n\nfeature_maker = Fbank(deltas=False,\n                    n_mels=80,\n                    left_frames=0,\n                    right_frames=0,\n                    )\n\n\ndataset_path = './'\nmetadata = pd.read_csv(\n    f\"{dataset_path}/metadata.csv\", dtype={\"baby_id\": str, \"chronological_index\": str}\n)\ndev_metadata = metadata.loc[metadata[\"split\"] == \"dev\"].copy()\nsample_submission = pd.read_csv(\n    f\"{dataset_path}/sample_submission.csv\"\n) \ndev_pairs = pd.read_csv(\n    f\"{dataset_path}/dev_pairs.csv\", dtype={\"baby_id_B\": str, \"baby_id_D\": str}\n)\ntest_pairs = pd.read_csv(f\"{dataset_path}/test_pairs.csv\")\n\n\nencoder = SpeakerRecognition.from_hparams(\n    source=\"Ubenwa/ecapa-voxceleb-ft-cryceleb\",\n    savedir=f\"ecapa-voxceleb-ft-cryceleb\",\n    run_opts={\"device\":\"cuda\"} #comment out if no GPU available\n)\n\n\nembedding_model = encoder.mods.embedding_model\n\n\ndef shuffle_group_and_concat(x, n=8):\n    \"\"\" Shuffle sound data per row and concat \"\"\"\n    concatenated_results = []\n    for _ in range(n):\n        shuffled_values = x.values.copy()\n        random.shuffle(shuffled_values)\n        concatenated = np.concatenate(shuffled_values)\n        tensor_length = concatenated.shape[0]\n        \n        if tensor_length < 16000*3:\n            raw_audio = np.tile(concatenated, math.ceil(16000*7 / tensor_length))\n\n        concatenated = concatenated[:random.randint(16000*3, 16000*15)]\n        concatenated_results.append(concatenated)\n    return concatenated_results\n\n\ndef compute_cosine_similarity_score(row, cry_dict):\n    \"\"\" Average scores for all possible pairs \"\"\"\n    cos = torch.nn.CosineSimilarity(dim=-1)\n    encoded_cry_B = cry_dict[(row['baby_id_B'], 'B')]['cry_encoded']\n    encoded_cry_D = cry_dict[(row['baby_id_D'], 'D')]['cry_encoded']\n    \n    similarity_scores = []\n    for tensor_B in encoded_cry_B:\n        for tensor_D in encoded_cry_D:\n            similarity_score = cos(tensor_B, tensor_D)\n            similarity_scores.append(similarity_score.item())\n    return sum(similarity_scores) / len(similarity_scores)\n\n\ndev_metadata = metadata.loc[metadata['split']=='dev'].copy()\ndev_metadata['cry'] = dev_metadata.apply(lambda row: read_audio(row['file_name']).numpy(), axis=1)\ngrouped_data = dev_metadata.groupby(['baby_id', 'period'])['cry']\ncry_dict = {}\nfor key, group in grouped_data:\n    cry_dict[key] = {'cry': shuffle_group_and_concat(group, 7)}\n\n\ndef encode(embedding_model, item):\n    \"\"\" Encoding audio for ECAPA model including: Feature_maker, Normalizer, Embedding Model \"\"\"\n    is_training = embedding_model.training\n    if is_training: embedding_model.eval()\n    item = item.unsqueeze(0)\n    feats = feature_maker(item.cuda())\n    feats = normalizer(feats)\n    embeddings = embedding_model(feats)\n    \n    if is_training: embedding_model.train()\n    return embeddings\n\n\ndef compute_eer_and_plot_verification_scores(pairs_df, plot=True):\n    ''' pairs_df must have 'score' and 'label' columns'''\n    positive_scores = pairs_df.loc[pairs_df['label']==1]['score'].values\n    negative_scores = pairs_df.loc[pairs_df['label']==0]['score'].values\n    eer, threshold = EER(torch.tensor(positive_scores), torch.tensor(negative_scores))\n    if plot:\n        ax = sns.histplot(pairs_df, x='score', hue='label', stat='percent', common_norm=False)\n        ax.set_title(f'EER={round(eer, 4)} - Thresh={round(threshold, 4)}')\n        plt.axvline(x=[threshold], color='red', ls='--');\n        print(eer)\n    return eer, threshold\n\n\ndef get_eer(embedding_model, cry_dict, df, tta_nb = 8, plot=True, ):\n    \n    embedding_model.eval()\n    for key, group in grouped_data:\n        cry_dict[key] = {'cry': shuffle_group_and_concat(group, tta_nb)}\n    with torch.no_grad():\n        embedding_model = embedding_model\n        if plot:\n            loop = tqdm(cry_dict.items())\n        else:\n            loop = cry_dict.items()            \n        for (baby_id, period), d in loop:\n            cry_array = d['cry']\n            cry_encoded_list = []\n            for row in cry_array:\n                encoded_row = encode(embedding_model.cuda(), torch.tensor(row).cuda())\n                encoded_row = encoded_row.cpu()\n                cry_encoded_list.append(encoded_row)\n\n            d['cry_encoded'] = cry_encoded_list\n    df['score'] = dev_pairs.apply(lambda row: compute_cosine_similarity_score(row=row, cry_dict=cry_dict), axis=1)\n    eer, threshold = compute_eer_and_plot_verification_scores(pairs_df=df, plot=plot)\n    embedding_model.train()\n\n    return eer, threshold\n\n\nget_eer(embedding_model, cry_dict, dev_pairs)\n\n\n\n\n/opt/conda/lib/python3.10/site-packages/torch/functional.py:641: UserWarning: stft with return_complex=False is deprecated. In a future pytorch release, stft will return complex tensors for all inputs, and return_complex=False will raise an error.\nNote: you can still call torch.view_as_real on the complex output to recover the old return format. (Triggered internally at /opt/conda/conda-bld/pytorch_1678411187366/work/aten/src/ATen/native/SpectralOps.cpp:862.)\n  return _VF.stft(input, n_fft, hop_length, win_length, window,  # type: ignore[attr-defined]\n\n\n0.22499999403953552\n\n\n(0.22499999403953552, 0.07767139354837127)"
  },
  {
    "objectID": "posts/cryceleb.html#dataset",
    "href": "posts/cryceleb.html#dataset",
    "title": "CryCeleb2023 Diary",
    "section": "Dataset",
    "text": "Dataset\n\ndef get_pair_item(item):\n    if item.name == 'B':\n        pair_name = 'D'\n    else:\n        pair_name = 'B'\n    return item.parent / pair_name\n\n\nfiles = metadata['file_name'].values\nfolders = [Path(file).parent for file in files]\nfolders = list(set(folders))\n\n\nlen(folders)\n\n1334\n\n\n\ndef read_audio_from_list(paths):\n    raw_audios_aug = []\n    random.shuffle(paths)\n    raw_audio = torch.concat([read_audio(str(filename)) for filename in paths])\n    tensor_length = raw_audio.shape[0]\n    if tensor_length < 16000*3:\n        raw_audio = raw_audio.repeat(math.ceil(16000*5 / tensor_length))\n    return raw_audio\n\n\ntrain_folders = [folder for folder in folders if folder.parent.parent.name in ['train']]\ndev_folders = [folder for folder in folders if folder.parent.parent.name in ['dev']]\nfull_folders = train_folders + dev_folders\npair_folders = [folder for folder in train_folders if get_pair_item(folder).exists()]\n\n\nlen(full_folders) ,len(train_folders), len(dev_folders), len(pair_folders)\n\n(1014, 934, 80, 696)\n\n\n\n### get both id from train and dev\nbaby_ids = metadata[(metadata['split'] == 'train')]['baby_id'].unique()\nbaby_ids = np.sort(baby_ids)\nn_classes = len(baby_ids)\nprint(n_classes)\n\n586\n\n\n\nid2idx = {baby_id: index for index, baby_id in enumerate(baby_ids)}\n\n\nfiles = metadata['file_name'].values\nfolders = [Path(file).parent for file in files]\nfolders = list(set(folders))\n\n\nfull_folders = [folder for folder in folders if folder.parent.parent.name in ['train', 'dev']]\ntrain_folders_pairs = [folder for folder in train_folders if get_pair_item(folder).exists()]\nbaby_ids_pairs = list(set([folder.parent.name for folder in train_folders_pairs]))\nvalid_folders = [Path('audio/train')/_id/ random.choice(['B','D']) for _id in baby_ids_pairs ]\ntrain_folders = [folder for folder in train_folders if folder not in valid_folders]\n\n\nlen(full_folders) ,len(train_folders), len(dev_folders), len(pair_folders)\n\n(1014, 586, 80, 696)\n\n\n\ntrain_meta = metadata[metadata['split'] == 'train']\ndev_meta = metadata[metadata['split'] == 'dev']\ntest_meta = metadata[metadata['split'] == 'test']\n\n\n# train_folders_not_pairs = [folder for folder in train_folders if not get_pair_item(folder).exists()]\n\n\ndef read_audio_from_folder(folder, shuffle = True):\n    if shuffle == True:\n        files = [str(filename) for filename in folder.ls().shuffle() if filename.suffix == '.wav']\n    else:\n        files = [str(filename) for filename in folder.ls() if filename.suffix == '.wav']\n    raw_audio = torch.concat([read_audio(str(filename)) for filename in files])\n    tensor_length = raw_audio.shape[0]\n    if tensor_length < 16000*3:\n        raw_audio = raw_audio.repeat(math.ceil(16000*6 / tensor_length))\n    return raw_audio\n\n\ndef get_label(folder):\n    return id2idx[folder.parent.name]\n\n\nclass CryCelebDset(Dataset):\n    def __init__(self,\n                 items):\n        super(CryCelebDset, self).__init__()\n        self.items = items\n        \n    def __len__(self):\n        return len(self.items)\n    \n    def __getitem__(self, i):\n        item = self.items[i]\n        audio = read_audio_from_folder(item)\n        label = get_label(item)\n        return audio, torch.Tensor([label]).long()\n\n\ndef collate_fn(batch):\n    audios, labels = zip(*batch)\n    target_lenth = min(audio.shape[0] for audio in audios)\n    \n    target_lenth = target_lenth if target_lenth < 16000*3 else min(target_lenth, random.randint(16000*3, 16000*8))\n\n    audios = [audio[:target_lenth] for audio in audios]\n    \n    return torch.stack(audios), torch.stack(labels)\n\n\n# train_dset = CryCelebDset(train_folders)\ntrain_dset = CryCelebDset(train_folders)\nvalid_dset = CryCelebDset(train_folders[:2]) # Validation is no use here, it is just a hack to make fastai work\n\n\nlen(train_dset), len(valid_dset)\n\n(586, 2)\n\n\n\ntrain_loader = DataLoader(train_dset, batch_size=16, shuffle=True,  collate_fn=collate_fn)\nvalid_loader = DataLoader(valid_dset, batch_size=32, shuffle=False,  collate_fn=collate_fn)\n\n\ndls = DataLoaders(train_loader, valid_loader)"
  },
  {
    "objectID": "posts/cryceleb.html#model",
    "href": "posts/cryceleb.html#model",
    "title": "CryCeleb2023 Diary",
    "section": "Model",
    "text": "Model\nThe model here shares the same architecture as the ECAPA model, but there are some differences in the hyperparameters, such as n_mels = 150, lin_neurons = 250. My intention was to experiment with a larger version of the default ECAPA model.\nThere is a minor modification in the loss function: I added label_smoothing with a value of 0.05.\n\nimport torch.nn.functional as F\nfrom torch import nn\n\nclass Classifier(nn.Module):\n\n    def __init__(\n        self,\n        input_size,\n        device=\"cpu\",\n        lin_neurons=192,\n        out_neurons=1211,\n        dropout_rate=0.5,  # add a dropout_rate parameter\n    ):\n\n        super().__init__()\n\n        self.linear = nn.Linear(input_size, lin_neurons)\n        self.dropout = nn.Dropout(dropout_rate)\n\n        # Final Layer\n        self.weight = nn.Parameter(\n            torch.FloatTensor(out_neurons, lin_neurons).to(device)\n        )\n        nn.init.xavier_uniform_(self.weight)\n\n    def forward(self, x):\n        x = self.linear(x)\n        x = self.dropout(x)\n\n        # Need to be normalized\n        x = F.linear(F.normalize(x.squeeze(1)), F.normalize(self.weight))\n        return x.unsqueeze(1)\n\n\ndef is_model_frozen(model):\n    return all(not param.requires_grad for param in model.parameters())\n\ndef unfreeze_model(model):\n    for param in model.parameters():\n        param.requires_grad = True\n\nunfreeze_model(embedding_model)\nprint(is_model_frozen(embedding_model))  \n\nFalse\n\n\n\nn_mels = 150\nlin_neurons = 250\n\n# n_mels = 80\n# lin_neurons = 192\n\nfeature_maker = sb.lobes.features.Fbank(deltas=False,\n                                        n_mels=n_mels,\n                                        left_frames=0,\n                                        right_frames=0,\n                                        )\n\nembedding_model = sb.lobes.models.ECAPA_TDNN.ECAPA_TDNN(input_size=n_mels,\n                                                        channels=[1024, 1024, 1024, 1024, 3072],\n                                                        kernel_sizes=[5, 3, 3, 3, 1],\n                                                        dilations=[1, 2, 3, 4, 1],\n                                                        groups=[1, 1, 1, 1, 1],\n                                                        attention_channels=128,\n                                                        lin_neurons=lin_neurons\n                                                        )\n\nclassifier = sb.lobes.models.ECAPA_TDNN.Classifier(input_size=lin_neurons,\n                        out_neurons=n_classes,\n                      )\nclass Model(nn.Module):\n    def __init__(self, feature_maker, normalizer, embedding_model, classifier):\n        super(Model, self).__init__()\n        self.feature_maker = feature_maker\n        self.normalizer = normalizer\n        self.embedding_model = embedding_model\n        self.classifier = classifier\n    \n    def forward(self, x):\n        feats = self.feature_maker(x)\n        feats = self.normalizer(feats)\n        embeddings = self.embedding_model(feats)\n        classifier_outputs = self.classifier(embeddings)\n        return classifier_outputs\n    \nmodel = Model(feature_maker = feature_maker,\n              normalizer=normalizer,\n              embedding_model=embedding_model,\n              classifier=classifier)\n\n\nclass LogSoftmaxWrapperSmoothing(nn.Module):\n    def __init__(self, loss_fn, smoothing=0.05):  # add a smoothing parameter\n        super(LogSoftmaxWrapperSmoothing, self).__init__()\n        self.loss_fn = loss_fn\n        self.criterion = torch.nn.KLDivLoss(reduction=\"sum\")\n        self.smoothing = smoothing  # store the smoothing value\n\n    def forward(self, outputs, targets, length=None):\n        outputs = outputs.squeeze(1)\n        targets = targets.squeeze(1)\n        targets = F.one_hot(targets.long(), outputs.shape[1]).float()\n\n        # Apply label smoothing\n        targets = (1 - self.smoothing) * targets + self.smoothing / outputs.shape[1]\n\n        try:\n            predictions = self.loss_fn(outputs, targets)\n        except TypeError:\n            predictions = self.loss_fn(outputs)\n\n        predictions = F.log_softmax(predictions, dim=1)\n        loss = self.criterion(predictions, targets) / targets.sum()\n        return loss\n    \nloss_base = sb.nnet.losses.AdditiveAngularMargin(margin=0.2, scale=30)\ncrit = LogSoftmaxWrapperSmoothing(loss_base)\ndef loss_fn(preds, targets):\n    return crit(preds, targets)\n\n\ndef eer_metric(preds, targs):\n    # The eer metric here is not related to the validation set but the dev set\n    eer, threshold = get_eer(embedding_model, cry_dict, dev_pairs, plot=False)\n    return eer\n\n\nlearner = Learner(dls, model, loss_func=loss_fn, metrics=[eer_metric], cbs=WandbCallback())\n\n\nlearner.lr_find()\n\n\n\n\n\n\n\n\nSuggestedLRs(valley=9.120108734350652e-05)\n\n\n\n\n\n\nlearner.fit_one_cycle(150, 2e-4)\n\nCould not gather input dimensions\nWandbCallback was not able to prepare a DataLoader for logging prediction samples -> 'DataLoader' object has no attribute 'new'\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      eer_metric\n      time\n    \n  \n  \n    \n      0\n      12.819111\n      9.852398\n      0.397115\n      00:21\n    \n    \n      1\n      11.732524\n      9.378596\n      0.369231\n      00:20\n    \n    \n      2\n      10.952858\n      6.739351\n      0.375000\n      00:19\n    \n    \n      3\n      10.304280\n      8.235709\n      0.350000\n      00:18\n    \n    \n      4\n      9.576555\n      6.657913\n      0.375000\n      00:18\n    \n    \n      5\n      8.874806\n      7.752380\n      0.350962\n      00:18\n    \n    \n      6\n      8.028608\n      4.957489\n      0.325000\n      00:17\n    \n    \n      7\n      7.302641\n      5.177752\n      0.301923\n      00:17\n    \n    \n      8\n      6.496997\n      4.656638\n      0.350000\n      00:17\n    \n    \n      9\n      5.806657\n      5.101495\n      0.325000\n      00:17\n    \n    \n      10\n      4.984231\n      2.045478\n      0.350000\n      00:18\n    \n    \n      11\n      4.510298\n      1.314584\n      0.327244\n      00:18\n    \n    \n      12\n      3.988340\n      0.315158\n      0.326603\n      00:17\n    \n    \n      13\n      3.477479\n      5.352105\n      0.325000\n      00:17\n    \n    \n      14\n      3.133040\n      0.237394\n      0.320833\n      00:17\n    \n    \n      15\n      2.831013\n      1.140466\n      0.350000\n      00:17\n    \n    \n      16\n      2.446104\n      0.798410\n      0.352244\n      00:18\n    \n    \n      17\n      2.167508\n      0.486705\n      0.325000\n      00:17\n    \n    \n      18\n      2.059879\n      1.214511\n      0.325000\n      00:17\n    \n    \n      19\n      1.854602\n      2.260158\n      0.350000\n      00:17\n    \n    \n      20\n      1.853107\n      0.357835\n      0.300000\n      00:17\n    \n    \n      21\n      1.740630\n      1.374100\n      0.325000\n      00:17\n    \n    \n      22\n      1.724865\n      0.170533\n      0.325000\n      00:18\n    \n    \n      23\n      1.595109\n      0.166785\n      0.297756\n      00:17\n    \n    \n      24\n      1.476745\n      0.489945\n      0.300000\n      00:17\n    \n    \n      25\n      1.364003\n      0.830093\n      0.347436\n      00:17\n    \n    \n      26\n      1.368073\n      0.172278\n      0.325000\n      00:17\n    \n    \n      27\n      1.400348\n      0.264813\n      0.350000\n      00:17\n    \n    \n      28\n      1.357518\n      0.213733\n      0.354487\n      00:17\n    \n    \n      29\n      1.350938\n      0.121906\n      0.306090\n      00:17\n    \n    \n      30\n      1.298094\n      0.797013\n      0.275000\n      00:17\n    \n    \n      31\n      1.163949\n      0.125197\n      0.325000\n      00:18\n    \n    \n      32\n      0.992551\n      0.494040\n      0.303846\n      00:18\n    \n    \n      33\n      0.929511\n      0.315667\n      0.350000\n      00:17\n    \n    \n      34\n      0.970226\n      0.303382\n      0.326603\n      00:17\n    \n    \n      35\n      1.001400\n      0.403191\n      0.325000\n      00:17\n    \n    \n      36\n      1.044940\n      0.573968\n      0.325000\n      00:17\n    \n    \n      37\n      0.906172\n      0.145333\n      0.300000\n      00:17\n    \n    \n      38\n      0.842299\n      0.281313\n      0.304167\n      00:17\n    \n    \n      39\n      0.871641\n      0.217045\n      0.350000\n      00:17\n    \n    \n      40\n      0.777124\n      0.131117\n      0.300000\n      00:17\n    \n    \n      41\n      0.705075\n      0.207996\n      0.276282\n      00:17\n    \n    \n      42\n      0.711332\n      0.606886\n      0.300000\n      00:17\n    \n    \n      43\n      0.756493\n      0.504772\n      0.325000\n      00:17\n    \n    \n      44\n      0.703369\n      0.255737\n      0.325000\n      00:18\n    \n    \n      45\n      0.670267\n      1.306089\n      0.276282\n      00:17\n    \n    \n      46\n      0.645874\n      0.156841\n      0.325000\n      00:17\n    \n    \n      47\n      0.648763\n      0.117524\n      0.325000\n      00:17\n    \n    \n      48\n      0.561911\n      0.229732\n      0.300000\n      00:17\n    \n    \n      49\n      0.529512\n      0.191458\n      0.295192\n      00:17\n    \n    \n      50\n      0.462782\n      0.167080\n      0.277244\n      00:18\n    \n    \n      51\n      0.496077\n      0.106041\n      0.275000\n      00:17\n    \n    \n      52\n      0.501537\n      0.292876\n      0.277244\n      00:17\n    \n    \n      53\n      0.470838\n      0.200016\n      0.306090\n      00:17\n    \n    \n      54\n      0.492161\n      0.140463\n      0.256090\n      00:17\n    \n    \n      55\n      0.490079\n      0.254963\n      0.256090\n      00:17\n    \n    \n      56\n      0.452705\n      0.186381\n      0.277885\n      00:17\n    \n    \n      57\n      0.422567\n      0.180647\n      0.274359\n      00:18\n    \n    \n      58\n      0.458263\n      0.916696\n      0.272756\n      00:17\n    \n    \n      59\n      0.445988\n      0.176482\n      0.250000\n      00:17\n    \n    \n      60\n      0.449376\n      0.134938\n      0.300000\n      00:17\n    \n    \n      61\n      0.398278\n      0.454310\n      0.274359\n      00:18\n    \n    \n      62\n      0.378900\n      0.136589\n      0.300000\n      00:18\n    \n    \n      63\n      0.397175\n      0.266560\n      0.346795\n      00:17\n    \n    \n      64\n      0.419594\n      0.166931\n      0.275000\n      00:17\n    \n    \n      65\n      0.408431\n      0.162984\n      0.322436\n      00:18\n    \n    \n      66\n      0.429785\n      0.227120\n      0.344872\n      00:17\n    \n    \n      67\n      0.380197\n      0.282507\n      0.325000\n      00:17\n    \n    \n      68\n      0.361336\n      0.403791\n      0.299359\n      00:18\n    \n    \n      69\n      0.348556\n      0.501471\n      0.277244\n      00:18\n    \n    \n      70\n      0.360931\n      0.358086\n      0.275000\n      00:17\n    \n    \n      71\n      0.336917\n      0.388072\n      0.350000\n      00:17\n    \n    \n      72\n      0.335198\n      0.326303\n      0.275000\n      00:18\n    \n    \n      73\n      0.318928\n      0.230708\n      0.350000\n      00:17\n    \n    \n      74\n      0.337089\n      0.224751\n      0.300000\n      00:17\n    \n    \n      75\n      0.347762\n      0.228684\n      0.295192\n      00:17\n    \n    \n      76\n      0.347869\n      0.283976\n      0.275000\n      00:17\n    \n    \n      77\n      0.328355\n      0.148460\n      0.300000\n      00:17\n    \n    \n      78\n      0.301195\n      0.314673\n      0.300000\n      00:18\n    \n    \n      79\n      0.309706\n      0.219821\n      0.330769\n      00:18\n    \n    \n      80\n      0.313028\n      0.351390\n      0.375000\n      00:17\n    \n    \n      81\n      0.311351\n      0.203537\n      0.374038\n      00:17\n    \n    \n      82\n      0.278428\n      0.227288\n      0.326603\n      00:17\n    \n    \n      83\n      0.300168\n      0.120307\n      0.300000\n      00:17\n    \n    \n      84\n      0.291518\n      0.273817\n      0.305128\n      00:18\n    \n    \n      85\n      0.286973\n      0.276371\n      0.324679\n      00:17\n    \n    \n      86\n      0.292313\n      0.201308\n      0.300000\n      00:18\n    \n    \n      87\n      0.286953\n      0.333281\n      0.279167\n      00:17\n    \n    \n      88\n      0.278925\n      0.292981\n      0.321154\n      00:17\n    \n    \n      89\n      0.254643\n      0.312703\n      0.254487\n      00:18\n    \n    \n      90\n      0.256090\n      0.102150\n      0.275000\n      00:17\n    \n    \n      91\n      0.256988\n      0.243337\n      0.250000\n      00:17\n    \n    \n      92\n      0.247612\n      1.446797\n      0.250000\n      00:18\n    \n    \n      93\n      0.240916\n      0.104841\n      0.300000\n      00:17\n    \n    \n      94\n      0.239867\n      0.203033\n      0.300000\n      00:18\n    \n    \n      95\n      0.250558\n      0.213792\n      0.300000\n      00:17\n    \n    \n      96\n      0.225012\n      0.146971\n      0.325000\n      00:18\n    \n    \n      97\n      0.250202\n      0.144672\n      0.322436\n      00:18\n    \n    \n      98\n      0.252809\n      0.223730\n      0.300000\n      00:18\n    \n    \n      99\n      0.247364\n      0.127707\n      0.303846\n      00:17\n    \n    \n      100\n      0.236257\n      0.200906\n      0.300000\n      00:17\n    \n    \n      101\n      0.215899\n      0.222088\n      0.275000\n      00:18\n    \n    \n      102\n      0.211499\n      0.264478\n      0.325000\n      00:17\n    \n    \n      103\n      0.220157\n      0.327042\n      0.278846\n      00:17\n    \n    \n      104\n      0.217344\n      0.180306\n      0.251282\n      00:17\n    \n    \n      105\n      0.211273\n      0.191087\n      0.325000\n      00:18\n    \n    \n      106\n      0.225987\n      0.226452\n      0.324679\n      00:18\n    \n    \n      107\n      0.234045\n      0.162532\n      0.300000\n      00:17\n    \n    \n      108\n      0.216443\n      0.187482\n      0.275000\n      00:18\n    \n    \n      109\n      0.211505\n      0.156684\n      0.276603\n      00:18\n    \n    \n      110\n      0.210457\n      0.178876\n      0.275000\n      00:17\n    \n    \n      111\n      0.203583\n      0.097995\n      0.280128\n      00:17\n    \n    \n      112\n      0.200213\n      0.150823\n      0.300000\n      00:18\n    \n    \n      113\n      0.205306\n      0.091030\n      0.275000\n      00:17\n    \n    \n      114\n      0.195609\n      0.419262\n      0.253205\n      00:17\n    \n    \n      115\n      0.184044\n      0.157910\n      0.269231\n      00:18\n    \n    \n      116\n      0.182212\n      0.235523\n      0.275000\n      00:18\n    \n    \n      117\n      0.177163\n      0.177653\n      0.275000\n      00:18\n    \n    \n      118\n      0.181401\n      0.236190\n      0.269551\n      00:17\n    \n    \n      119\n      0.175148\n      0.269990\n      0.269231\n      00:17\n    \n    \n      120\n      0.176068\n      0.224078\n      0.319872\n      00:18\n    \n    \n      121\n      0.185972\n      0.157348\n      0.275000\n      00:17\n    \n    \n      122\n      0.174520\n      0.167444\n      0.300000\n      00:18\n    \n    \n      123\n      0.177205\n      0.214876\n      0.300000\n      00:18\n    \n    \n      124\n      0.166557\n      0.090736\n      0.297756\n      00:18\n    \n    \n      125\n      0.167413\n      0.265629\n      0.325000\n      00:17\n    \n    \n      126\n      0.164617\n      0.261985\n      0.325000\n      00:18\n    \n    \n      127\n      0.167717\n      0.223148\n      0.256090\n      00:17\n    \n    \n      128\n      0.160176\n      0.159316\n      0.325000\n      00:17\n    \n    \n      129\n      0.155260\n      0.159374\n      0.300000\n      00:18\n    \n    \n      130\n      0.154295\n      0.176301\n      0.272115\n      00:17\n    \n    \n      131\n      0.149302\n      0.210373\n      0.275000\n      00:17\n    \n    \n      132\n      0.156900\n      0.168842\n      0.300000\n      00:17\n    \n    \n      133\n      0.150621\n      0.171651\n      0.274038\n      00:17\n    \n    \n      134\n      0.150258\n      0.184598\n      0.278526\n      00:18\n    \n    \n      135\n      0.152160\n      0.148298\n      0.325000\n      00:17\n    \n    \n      136\n      0.150087\n      0.219485\n      0.274038\n      00:17\n    \n    \n      137\n      0.147386\n      0.202868\n      0.302244\n      00:17\n    \n    \n      138\n      0.147530\n      0.129326\n      0.273077\n      00:17\n    \n    \n      139\n      0.145539\n      0.096450\n      0.296474\n      00:17\n    \n    \n      140\n      0.145980\n      0.111623\n      0.300000\n      00:18\n    \n    \n      141\n      0.145903\n      0.138313\n      0.300000\n      00:17\n    \n    \n      142\n      0.150013\n      0.089761\n      0.275000\n      00:18\n    \n    \n      143\n      0.154749\n      0.164044\n      0.275000\n      00:17\n    \n    \n      144\n      0.149258\n      0.143600\n      0.280449\n      00:17\n    \n    \n      145\n      0.145224\n      0.149808\n      0.300000\n      00:18\n    \n    \n      146\n      0.140290\n      0.104018\n      0.277885\n      00:18\n    \n    \n      147\n      0.142366\n      0.178131\n      0.293910\n      00:17\n    \n    \n      148\n      0.149232\n      0.173077\n      0.275000\n      00:17\n    \n    \n      149\n      0.145681\n      0.137975\n      0.297115\n      00:17"
  },
  {
    "objectID": "posts/cryceleb.html#submission",
    "href": "posts/cryceleb.html#submission",
    "title": "CryCeleb2023 Diary",
    "section": "Submission",
    "text": "Submission\n\nembedding_model.eval()\ntest_metadata = metadata.loc[metadata['split']=='test'].copy()\ntest_metadata['cry'] = test_metadata.apply(lambda row: read_audio(row['file_name']).numpy(), axis=1)\ngrouped_data = test_metadata.groupby(['baby_id', 'period'])['cry']\ncry_dict_test = {}\nfor key, group in grouped_data:\n    cry_dict_test[key] = {'cry': shuffle_group_and_concat(group, 7)}\n\nwith torch.no_grad():\n\n    for (baby_id, period), d in tqdm(cry_dict_test.items()):\n        cry_array = d['cry']\n        cry_encoded_list = []\n\n        for row in cry_array:\n            encoded_row = encode(embedding_model.cuda(), torch.tensor(row).cuda())\n            cry_encoded_list.append(encoded_row)\n\n        d['cry_encoded'] = cry_encoded_list\n    \ntest_pairs['score'] = test_pairs.apply(lambda row: compute_cosine_similarity_score(row=row, cry_dict=cry_dict_test), axis=1)\n\n\n\n\n\n#submission must match the 'sample_submission.csv' format exactly\nmy_submission= test_pairs[['id', 'score']]\nmy_submission.to_csv('my_submission.csv', index=False)\ndisplay(my_submission.head())\n\n\n\n\n\n  \n    \n      \n      id\n      score\n    \n  \n  \n    \n      0\n      anonymous027B_anonymous212D\n      -0.120739\n    \n    \n      1\n      anonymous035B_anonymous225D\n      -0.063723\n    \n    \n      2\n      anonymous029B_anonymous288D\n      0.026014\n    \n    \n      3\n      anonymous001B_anonymous204D\n      -0.170518\n    \n    \n      4\n      anonymous075B_anonymous244D\n      0.125677"
  },
  {
    "objectID": "posts/captcha.html",
    "href": "posts/captcha.html",
    "title": "Captcha prediction - From CNN to CRNN",
    "section": "",
    "text": "3 approaches predicting the captcha with > 95% accuracy\nDo you want a little bit more challenge than a traditional Image Classification? Let’s see if we can classify a sequence of classes rather than a single one ;).\nIn this blog post, I will try to break the captcha using 3 different approaches.\nIn this blog post:\nSpecial thanks to these references below for helping me out during this development: - Fastai Captcha Recognition by Augustas Macijauskas - CRNN-Pytorch repo by GitYCC"
  },
  {
    "objectID": "posts/captcha.html#mid-level-fastai-dataloaders",
    "href": "posts/captcha.html#mid-level-fastai-dataloaders",
    "title": "Captcha prediction - From CNN to CRNN",
    "section": "Mid-Level fastai Dataloaders",
    "text": "Mid-Level fastai Dataloaders\nIn this part, we will use the Mid-Level API fastai to load data. This tool will help us to create Dataloaders which compatible with all the fastai ecosystems\nIn brief, we will create a CaptchaTransform ( similar to a Pytorch Datasets ) which returns something showable (CaptchaImage in this case)\nTake a look at this fastai tutorial for more details\n\nfrom fastai.vision.all import *\nimport PIL\nfrom torch.nn import CTCLoss\nfrom scipy.special import logsumexp\n\n\npath = untar_data('https://github.com/AakashKumarNain/CaptchaCracker/raw/master/captcha_images_v2.zip')\n\n\nimgs = get_image_files(path)\n\n\nimgs\n\n(#1040) [Path('/home/ubuntu/.fastai/data/captcha_images_v2/by5y3.png'),Path('/home/ubuntu/.fastai/data/captcha_images_v2/efb3f.png'),Path('/home/ubuntu/.fastai/data/captcha_images_v2/76y6f.png'),Path('/home/ubuntu/.fastai/data/captcha_images_v2/e2d66.png'),Path('/home/ubuntu/.fastai/data/captcha_images_v2/c6we6.png'),Path('/home/ubuntu/.fastai/data/captcha_images_v2/p2m6n.png'),Path('/home/ubuntu/.fastai/data/captcha_images_v2/d66cn.png'),Path('/home/ubuntu/.fastai/data/captcha_images_v2/2yggg.png'),Path('/home/ubuntu/.fastai/data/captcha_images_v2/cffp4.png'),Path('/home/ubuntu/.fastai/data/captcha_images_v2/5npdn.png')...]\n\n\n\n\n\n\n\n\nNote\n\n\n\nBelow is the mapping from label to index and vice-versa. The index starts from 1 because we save the 0 for UNKNOWN class which is use in the last section CNN + RNN\n\n\n\n# Find all the unique labels\nld = set()\nfor f in imgs:\n    for l in f.stem:\n        ld.add(l)\n\nlabel_mapper = \"\".join(sorted(ld))\nl2i = { label_mapper[i]: i+1 for i in range(len(label_mapper)) } # labels to int + BLANK LABEL\ni2l = { v: k for k, v in l2i.items() } # int to labels\n\n\nl2i, i2l\n\n({'2': 1,\n  '3': 2,\n  '4': 3,\n  '5': 4,\n  '6': 5,\n  '7': 6,\n  '8': 7,\n  'b': 8,\n  'c': 9,\n  'd': 10,\n  'e': 11,\n  'f': 12,\n  'g': 13,\n  'm': 14,\n  'n': 15,\n  'p': 16,\n  'w': 17,\n  'x': 18,\n  'y': 19},\n {1: '2',\n  2: '3',\n  3: '4',\n  4: '5',\n  5: '6',\n  6: '7',\n  7: '8',\n  8: 'b',\n  9: 'c',\n  10: 'd',\n  11: 'e',\n  12: 'f',\n  13: 'g',\n  14: 'm',\n  15: 'n',\n  16: 'p',\n  17: 'w',\n  18: 'x',\n  19: 'y'})\n\n\n\ndef label_func(path): return tensor([l2i[l] for l in path.stem])\n\n\ndef open_image(fname):\n    img = PIL.Image.open(fname).convert('RGB')\n    t = torch.Tensor(np.array(img))\n    return t.permute(2,0,1).double()/255.0\n\n\nclass CaptchaImage(fastuple):\n    def show(self, ctx=None, **kwargs): \n        img,labels = self\n        t = tensor(img)\n        return show_image(t, title=''.join(str(i2l[i.item()]) for i in labels), ctx=ctx, **kwargs)\n\n\nclass CaptchaTransform(Transform):\n    def __init__(self, files):\n        self.files = files\n        \n    def encodes(self, i):\n        file = self.files[i]\n        label = label_func(file)\n        img = open_image(file)\n        return CaptchaImage(TensorImage(img), label)\n\n\nbs = 8\n\n\nsplitter = RandomSplitter(valid_pct=0.1) \ntrain_idx , valid_idx = splitter(imgs) \ntrain_files = imgs[train_idx]\nvalid_files = imgs[valid_idx]\ntrain_tl= TfmdLists(range(len(train_files)), CaptchaTransform(train_files))\nvalid_tl= TfmdLists(range(len(valid_files)), CaptchaTransform(valid_files))\ndls = DataLoaders.from_dsets(train_tl, \n                             valid_tl, \n                             after_item=Resize((50,200), method=ResizeMethod.Squish),\n                             after_batch=[Rotate(max_deg=10),\n                                          Brightness(max_lighting=0.5, p=0.8, batch=False),\n                                          Contrast(max_lighting=0.5, p=0.8, batch=False)], \n                             bs=bs)\n\n\n@typedispatch\ndef show_batch(x:CaptchaImage, y, samples, ctxs=None, max_n=6, nrows=None, ncols=2, figsize=None, **kwargs):\n    if figsize is None: figsize = (ncols*6, max_n//ncols * 3)\n    if ctxs is None: ctxs = get_grid(min(x[0].shape[0], max_n), nrows=None, ncols=ncols, figsize=figsize)\n    for i,ctx in enumerate(ctxs): CaptchaImage(x[0][i],x[1][i]).show(ctx=ctx)\n\n\none_batch = dls.one_batch()\n\n\ndls.show_batch(max_n=10)\n\n\n\n\n\nn_chars = len(i2l)\n\n\nn_chars * 5\n\n95"
  },
  {
    "objectID": "posts/captcha.html#an-image-classification-model-with-a-tweak-on-output-dimension",
    "href": "posts/captcha.html#an-image-classification-model-with-a-tweak-on-output-dimension",
    "title": "Captcha prediction - From CNN to CRNN",
    "section": "An Image Classification Model with a tweak on output dimension",
    "text": "An Image Classification Model with a tweak on output dimension\nA simple image classification model is used here with the output dimension: Number_of_vocab x Number_of_classes. Then, while calculating the loss function, we reshape the dimension and calculating the Cross-Entropy loss for each class (The fastai CrossEntropyLossFlat can help you to specify which axis that you want to calculate the Cross-Entropy loss on)\n\n\n\nsimple tweak on output\n\n\n\nn_class = n_chars + 1\n\n\nmodel = create_cnn_model(xresnet34, n_class*5)\n\n\ncrit = LabelSmoothingCrossEntropyFlat()\n\n\ndef loss_captcha(output, target):\n    output = output.view(-1, 5, n_class)\n    return crit(output, target)\n\n\ndef char_accu(inp, targ, axis=-1):\n    inps = inp.reshape(-1, 5, n_class)\n    pred = inps.argmax(dim=-1)\n    return (pred == targ).sum()/(pred.shape[0]*pred.shape[1])\n\n\ndef captcha_accu(inp, targ, axis=-1):\n    inps = inp.reshape(-1, 5, n_class)\n    pred = inps.argmax(dim=-1)\n    return ((pred == targ).all(axis=1)).sum()/targ.shape[0]\n\n\nlearn = Learner(dls, model, loss_captcha, metrics=[char_accu, captcha_accu])\n\n\nmodel = model.cuda()\ndls = dls.cuda()\n\n\nlearn.fit_one_cycle(60, 3e-3)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      char_accu\n      captcha_accu\n      time\n    \n  \n  \n    \n      0\n      4.417060\n      3.768889\n      0.065385\n      0.000000\n      00:05\n    \n    \n      1\n      4.238056\n      5.701259\n      0.055769\n      0.000000\n      00:05\n    \n    \n      2\n      3.933014\n      3.674879\n      0.088462\n      0.000000\n      00:05\n    \n    \n      3\n      3.719078\n      5.090882\n      0.075000\n      0.000000\n      00:05\n    \n    \n      4\n      3.548473\n      3.824108\n      0.132692\n      0.000000\n      00:05\n    \n    \n      5\n      3.366105\n      3.826407\n      0.113462\n      0.000000\n      00:05\n    \n    \n      6\n      3.136746\n      3.577558\n      0.115385\n      0.000000\n      00:05\n    \n    \n      7\n      2.936203\n      3.092070\n      0.194231\n      0.000000\n      00:05\n    \n    \n      8\n      2.729806\n      3.936151\n      0.196154\n      0.000000\n      00:05\n    \n    \n      9\n      2.521348\n      4.372227\n      0.161538\n      0.000000\n      00:05\n    \n    \n      10\n      2.263230\n      3.843181\n      0.184615\n      0.000000\n      00:05\n    \n    \n      11\n      2.063784\n      6.484088\n      0.094231\n      0.000000\n      00:05\n    \n    \n      12\n      1.915519\n      5.548406\n      0.196154\n      0.000000\n      00:05\n    \n    \n      13\n      1.772406\n      2.161972\n      0.426923\n      0.000000\n      00:05\n    \n    \n      14\n      1.659181\n      2.289798\n      0.411538\n      0.000000\n      00:05\n    \n    \n      15\n      1.480252\n      6.103688\n      0.165385\n      0.000000\n      00:05\n    \n    \n      16\n      1.440136\n      1.914036\n      0.509615\n      0.009615\n      00:05\n    \n    \n      17\n      1.336665\n      3.500629\n      0.332692\n      0.009615\n      00:05\n    \n    \n      18\n      1.275441\n      1.713563\n      0.590385\n      0.076923\n      00:05\n    \n    \n      19\n      1.219574\n      1.325677\n      0.738462\n      0.240385\n      00:05\n    \n    \n      20\n      1.165449\n      1.249834\n      0.771154\n      0.298077\n      00:05\n    \n    \n      21\n      1.132226\n      1.372405\n      0.711538\n      0.163462\n      00:05\n    \n    \n      22\n      1.072073\n      1.138467\n      0.823077\n      0.403846\n      00:05\n    \n    \n      23\n      1.045686\n      1.143437\n      0.832692\n      0.432692\n      00:05\n    \n    \n      24\n      1.027944\n      1.020135\n      0.890385\n      0.605769\n      00:05\n    \n    \n      25\n      0.980347\n      0.953016\n      0.905769\n      0.673077\n      00:05\n    \n    \n      26\n      0.955928\n      0.885346\n      0.938461\n      0.769231\n      00:05\n    \n    \n      27\n      0.938319\n      0.880523\n      0.940385\n      0.778846\n      00:05\n    \n    \n      28\n      0.912880\n      0.909565\n      0.926923\n      0.692308\n      00:05\n    \n    \n      29\n      0.888791\n      0.846983\n      0.957692\n      0.836538\n      00:05\n    \n    \n      30\n      0.877755\n      0.829840\n      0.959615\n      0.855769\n      00:05\n    \n    \n      31\n      0.854199\n      0.870150\n      0.946154\n      0.788462\n      00:05\n    \n    \n      32\n      0.838330\n      0.819317\n      0.959615\n      0.855769\n      00:05\n    \n    \n      33\n      0.824045\n      0.791964\n      0.978846\n      0.951923\n      00:05\n    \n    \n      34\n      0.821468\n      0.794070\n      0.969231\n      0.894231\n      00:05\n    \n    \n      35\n      0.803675\n      0.774516\n      0.969231\n      0.913462\n      00:05\n    \n    \n      36\n      0.800759\n      0.771277\n      0.975000\n      0.932692\n      00:05\n    \n    \n      37\n      0.784726\n      0.774723\n      0.971154\n      0.913462\n      00:05\n    \n    \n      38\n      0.776317\n      0.733620\n      0.986538\n      0.971154\n      00:05\n    \n    \n      39\n      0.767470\n      0.736605\n      0.982692\n      0.951923\n      00:05\n    \n    \n      40\n      0.757092\n      0.729704\n      0.978846\n      0.942308\n      00:05\n    \n    \n      41\n      0.755353\n      0.721849\n      0.984615\n      0.961538\n      00:05\n    \n    \n      42\n      0.754742\n      0.728808\n      0.978846\n      0.951923\n      00:05\n    \n    \n      43\n      0.748297\n      0.719470\n      0.982692\n      0.961538\n      00:05\n    \n    \n      44\n      0.742404\n      0.716713\n      0.986538\n      0.971154\n      00:05\n    \n    \n      45\n      0.735511\n      0.707033\n      0.984615\n      0.961538\n      00:05\n    \n    \n      46\n      0.735871\n      0.699644\n      0.984615\n      0.961538\n      00:06\n    \n    \n      47\n      0.728447\n      0.696534\n      0.984615\n      0.961538\n      00:05\n    \n    \n      48\n      0.723877\n      0.706259\n      0.984615\n      0.961538\n      00:05\n    \n    \n      49\n      0.728841\n      0.698290\n      0.984615\n      0.961538\n      00:05\n    \n    \n      50\n      0.721174\n      0.697634\n      0.984615\n      0.961538\n      00:05\n    \n    \n      51\n      0.720327\n      0.697556\n      0.986538\n      0.971154\n      00:05\n    \n    \n      52\n      0.714673\n      0.690376\n      0.988462\n      0.971154\n      00:06\n    \n    \n      53\n      0.717317\n      0.693437\n      0.984615\n      0.961538\n      00:05\n    \n    \n      54\n      0.714745\n      0.691280\n      0.986538\n      0.971154\n      00:05\n    \n    \n      55\n      0.715825\n      0.685640\n      0.984615\n      0.961538\n      00:06\n    \n    \n      56\n      0.711018\n      0.691839\n      0.986538\n      0.971154\n      00:05\n    \n    \n      57\n      0.713582\n      0.688716\n      0.986538\n      0.971154\n      00:06\n    \n    \n      58\n      0.713092\n      0.687872\n      0.986538\n      0.971154\n      00:06\n    \n    \n      59\n      0.711346\n      0.691615\n      0.988462\n      0.971154\n      00:05\n    \n  \n\n\n\n\nlearn.recorder.plot_loss()\n\n\n\n\nWow! With this simple trick, we can reach 97% accuracy for the prediction 5-digits captcha. Very impressive! Let’s see if we can do it better with other techniques"
  },
  {
    "objectID": "posts/captcha.html#remove-the-adaptiveavgpool2d-to-reserve-spatial-information",
    "href": "posts/captcha.html#remove-the-adaptiveavgpool2d-to-reserve-spatial-information",
    "title": "Captcha prediction - From CNN to CRNN",
    "section": "Remove the AdaptiveAvgPool2d to reserve spatial information",
    "text": "Remove the AdaptiveAvgPool2d to reserve spatial information\nIn the model used above, between the body and head, there is an AdaptiveAvgPool2d layer, which blurs all essential spatial information. So let’s remove it and create our own head\n\n\n\nReceptive field with and without Adaptive Average Pooling\n\n\n\n\n\n\n\n\nIntuition\n\n\n\nFrom the Illustration above, we can see that, with AdaptiveAvgPool2d, each element in the feature vector must understand the whole Captcha, to classify correctly. To facilitate the work, by removing the Pooling layer, each feature needs to represent only a part of the Captcha, or in the best case, a letter. Combining all the letter’s features together can give us a Captcha prediction\n\n\n\nbody = create_body(xresnet34)\n\n\nhead = nn.Sequential(\n    Flatten(),\n    nn.ReLU(),\n    nn.Dropout(0.5),\n    nn.Linear(7168,1000),\n    nn.ReLU(),\n    nn.BatchNorm1d(1000),\n    nn.Dropout(0.5),\n    nn.Linear(1000,n_class*5),\n)\n\n\nmodel = nn.Sequential(body, head)\n\n\nmodel.cuda()\ndls.cuda()\n\n<fastai.data.core.DataLoaders>\n\n\n\nlearn = Learner(dls, model, loss_captcha, metrics=[char_accu, captcha_accu])\n\n\nlearn.fit_one_cycle(60, 3e-3)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      char_accu\n      captcha_accu\n      time\n    \n  \n  \n    \n      0\n      3.056647\n      2.770755\n      0.221154\n      0.000000\n      00:06\n    \n    \n      1\n      2.707805\n      2.455260\n      0.351923\n      0.019231\n      00:06\n    \n    \n      2\n      2.307795\n      2.130244\n      0.434615\n      0.048077\n      00:06\n    \n    \n      3\n      1.944143\n      1.862135\n      0.544231\n      0.067308\n      00:06\n    \n    \n      4\n      1.663925\n      1.757791\n      0.603846\n      0.076923\n      00:06\n    \n    \n      5\n      1.499317\n      1.516997\n      0.653846\n      0.153846\n      00:06\n    \n    \n      6\n      1.436849\n      1.711082\n      0.590385\n      0.048077\n      00:06\n    \n    \n      7\n      1.486420\n      1.472152\n      0.676923\n      0.153846\n      00:06\n    \n    \n      8\n      1.389985\n      1.436426\n      0.725000\n      0.192308\n      00:06\n    \n    \n      9\n      1.344463\n      1.969319\n      0.588462\n      0.067308\n      00:06\n    \n    \n      10\n      1.500018\n      1.610145\n      0.661538\n      0.105769\n      00:06\n    \n    \n      11\n      1.370128\n      1.287863\n      0.821154\n      0.451923\n      00:06\n    \n    \n      12\n      1.320343\n      1.476295\n      0.742308\n      0.240385\n      00:06\n    \n    \n      13\n      1.276946\n      3.231544\n      0.340385\n      0.000000\n      00:06\n    \n    \n      14\n      1.580945\n      1.563601\n      0.763462\n      0.307692\n      00:06\n    \n    \n      15\n      1.444904\n      1.174396\n      0.834615\n      0.432692\n      00:06\n    \n    \n      16\n      1.276948\n      1.223626\n      0.817308\n      0.403846\n      00:06\n    \n    \n      17\n      1.145310\n      1.043204\n      0.901923\n      0.653846\n      00:06\n    \n    \n      18\n      1.079106\n      1.131395\n      0.909615\n      0.701923\n      00:06\n    \n    \n      19\n      1.054410\n      1.013260\n      0.901923\n      0.634615\n      00:06\n    \n    \n      20\n      1.059869\n      1.099213\n      0.892308\n      0.634615\n      00:06\n    \n    \n      21\n      1.031296\n      0.993608\n      0.905769\n      0.663462\n      00:06\n    \n    \n      22\n      0.994466\n      0.873521\n      0.944231\n      0.788462\n      00:06\n    \n    \n      23\n      1.009694\n      0.865026\n      0.948077\n      0.817308\n      00:06\n    \n    \n      24\n      0.932827\n      1.105105\n      0.951923\n      0.875000\n      00:06\n    \n    \n      25\n      0.887062\n      0.852510\n      0.950000\n      0.836538\n      00:06\n    \n    \n      26\n      0.884278\n      0.817573\n      0.959615\n      0.875000\n      00:06\n    \n    \n      27\n      0.862702\n      0.815369\n      0.963462\n      0.865385\n      00:06\n    \n    \n      28\n      0.853542\n      0.814780\n      0.969231\n      0.903846\n      00:06\n    \n    \n      29\n      0.852293\n      0.793552\n      0.971154\n      0.903846\n      00:06\n    \n    \n      30\n      0.832754\n      1.187254\n      0.892308\n      0.605769\n      00:06\n    \n    \n      31\n      0.824426\n      0.905626\n      0.971154\n      0.923077\n      00:06\n    \n    \n      32\n      0.802780\n      0.747221\n      0.973077\n      0.913462\n      00:06\n    \n    \n      33\n      0.807151\n      1.262912\n      0.957692\n      0.913462\n      00:06\n    \n    \n      34\n      0.788464\n      0.744047\n      0.980769\n      0.942308\n      00:06\n    \n    \n      35\n      0.772782\n      0.724258\n      0.982692\n      0.932692\n      00:06\n    \n    \n      36\n      0.764042\n      0.716053\n      0.980769\n      0.951923\n      00:06\n    \n    \n      37\n      0.755922\n      0.726421\n      0.980769\n      0.942308\n      00:06\n    \n    \n      38\n      0.755969\n      0.716299\n      0.984615\n      0.951923\n      00:06\n    \n    \n      39\n      0.742237\n      0.709827\n      0.988461\n      0.971154\n      00:06\n    \n    \n      40\n      0.741012\n      0.700651\n      0.986538\n      0.961538\n      00:06\n    \n    \n      41\n      0.739579\n      0.746366\n      0.975000\n      0.923077\n      00:06\n    \n    \n      42\n      0.734317\n      0.740812\n      0.978846\n      0.942308\n      00:06\n    \n    \n      43\n      0.728524\n      0.689804\n      0.984615\n      0.951923\n      00:06\n    \n    \n      44\n      0.721895\n      0.686216\n      0.984615\n      0.961538\n      00:06\n    \n    \n      45\n      0.718292\n      0.680776\n      0.984615\n      0.961538\n      00:06\n    \n    \n      46\n      0.711961\n      0.675663\n      0.988462\n      0.971154\n      00:06\n    \n    \n      47\n      0.711802\n      0.678798\n      0.988461\n      0.971154\n      00:06\n    \n    \n      48\n      0.712833\n      0.678948\n      0.986538\n      0.961538\n      00:06\n    \n    \n      49\n      0.711009\n      0.678042\n      0.984615\n      0.961538\n      00:06\n    \n    \n      50\n      0.705792\n      0.671570\n      0.986538\n      0.961538\n      00:06\n    \n    \n      51\n      0.703747\n      0.669645\n      0.986538\n      0.961538\n      00:06\n    \n    \n      52\n      0.700930\n      0.668842\n      0.988462\n      0.971154\n      00:06\n    \n    \n      53\n      0.700268\n      0.667778\n      0.988461\n      0.971154\n      00:06\n    \n    \n      54\n      0.698437\n      0.673563\n      0.988461\n      0.971154\n      00:06\n    \n    \n      55\n      0.702755\n      0.665972\n      0.988462\n      0.961538\n      00:06\n    \n    \n      56\n      0.699661\n      0.668209\n      0.988461\n      0.971154\n      00:06\n    \n    \n      57\n      0.695964\n      0.666184\n      0.988461\n      0.971154\n      00:06\n    \n    \n      58\n      0.697385\n      0.665079\n      0.992308\n      0.980769\n      00:06\n    \n    \n      59\n      0.702616\n      0.668129\n      0.988462\n      0.961538\n      00:06\n    \n  \n\n\n\n\nlearn.recorder.plot_loss()\n\n\n\n\nWe have a quite similar result to the previous model after 60 epochs. However, this one learns much faster. After 15 epochs, it attains already 43% captcha accuracy while the With AdaptiveAvgPool2d is still at 0%"
  },
  {
    "objectID": "posts/captcha.html#crnn-ctc-loss",
    "href": "posts/captcha.html#crnn-ctc-loss",
    "title": "Captcha prediction - From CNN to CRNN",
    "section": "CRNN + CTC Loss",
    "text": "CRNN + CTC Loss\nOne can imagine, from the intuition of the last section, if we can extract features from letters and then predict the captcha, How about using a Recurrent Neural Network (RNN)? Is it for solving sequence problems right?\nYes, yes, It is the CRNN.\n\n\n\nCRNN Model\n\n\n\n\n\n\n\n\nNote\n\n\n\nFeel free to run the model step by step through each layer to understand better the dimension\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Sequence Length of the output doesn’t necessarily equal to the Captcha Length (which is 5 in our case) because our loss function CTC Loss knows how to handle it\n\n\nThe CNN-Body model I use here is resnet34, but not the entire one. We cut it after some layers. The reason is, the deeper the image passes through the CNN the more its Width shrink, and it can not be smaller than our captcha length (which is 5). Below you can see I choose to cut after 7 layers so the feature’s Width is still 13 (the last dimension of the tensor)\n\nbody = create_body(resnet34, cut=7)\n\n\nn_class = n_chars + 1\n\n\nn_class\n\n20\n\n\nBy running the CNN body manually, I can know the number of output features, height and width which will be used later for building the CRNN model\n\nbody(one_batch[0].cpu()).shape\n\ntorch.Size([8, 256, 4, 13])\n\n\n\nclass CRNN(nn.Module):\n    def __init__(self, output_channel, H, W, n_class, map_to_seq_hidden=64, rnn_hidden_1=256, rnn_hidden_2=128):\n        super(CRNN, self).__init__()\n        self.body = create_body(resnet34, cut=7)\n        self.map_to_seq = LinBnDrop(output_channel * H, map_to_seq_hidden, p=0.1, bn=False, lin_first=False)\n        self.rnn1 = nn.LSTM(map_to_seq_hidden, rnn_hidden_1, bidirectional=True)\n        self.rnn2 = nn.LSTM(2 * rnn_hidden_1, rnn_hidden_2, bidirectional=True)\n        self.dense = LinBnDrop(2 * rnn_hidden_2, n_class, p=0.1, bn=False, lin_first=False)\n        \n    def forward(self, images):\n        # shape of images: (batch, channel, height, width)\n\n        conv = self.body(images)\n        batch, channel, height, width = conv.size()\n\n        conv = conv.view(batch, channel * height, width)\n        conv = conv.permute(2, 0, 1)  # (width, batch, feature)\n        seq = self.map_to_seq(conv)\n\n        recurrent, _ = self.rnn1(seq)\n        recurrent, _ = self.rnn2(recurrent)\n\n        output = self.dense(recurrent)\n        return output  # shape: (seq_len, batch, num_class)\n\n\noutput_channel = 256\nH = 4\nW = 13\n\n\nmodel = CRNN(output_channel, H, W, n_class)\n\n\nsteps = W\n\nThe loss function we use here is CTC Loss. In brief, it is a loss function that can handle a sequence classification without a specific alignment (Because we don’t have a character-level dataset and the span of each character is random). An Illustration is below (Taken from https://sid2697.github.io/Blog_Sid/algorithm/2019/10/19/CTC-Loss.html). In CTC Loss, it allows a repeated prediction with a character that spans through multiple positions and also a blank character. However, we need a decoder to decode later the output. I will talk about it in the next section\n\n\n\nCTC Loss Illustration\n\n\n\ncriterion = nn.CTCLoss()\n\n\ndef loss_captcha_ctc(output, target):\n    batch_size = target.shape[0]\n    input_lengths = torch.LongTensor([steps] * batch_size)\n    target_lengths = torch.LongTensor([5] * batch_size)\n    log_probs = torch.nn.functional.log_softmax(output, dim=2)\n    return criterion(log_probs, target, input_lengths, target_lengths)\n\n\nDecoder and Metrics\nAs the output of CRNN model is not exactly corresponding to the Groud-Truth, we must have something to decode it and get the final prediction. Check this tutorial for more details https://towardsdatascience.com/beam-search-decoding-in-ctc-trained-neural-networks-5a889a3d85a7. Below there is code for the greedy and beam-search technique\n\nblank = 0\nbeam_size = 10\n\n\nNINF = -1 * float('inf')\nDEFAULT_EMISSION_THRESHOLD = 0.01\n\n\ndef _reconstruct(labels, blank=0):\n    new_labels = []\n    # merge same labels\n    previous = None\n    for l in labels:\n        if l != previous:\n            new_labels.append(l)\n            previous = l\n    # delete blank\n    new_labels = [l for l in new_labels if l != blank]\n    return new_labels\n\n\ndef greedy_decode(emission_log_prob, blank=0, **kwargs):\n    labels = np.argmax(emission_log_prob, axis=-1)\n    labels = _reconstruct(labels, blank=blank)\n    return labels\n\n\ndef beam_search_decode(emission_log_prob, blank=0, **kwargs):\n    beam_size = kwargs['beam_size']\n    emission_threshold = kwargs.get('emission_threshold', np.log(DEFAULT_EMISSION_THRESHOLD))\n\n    length, class_count = emission_log_prob.shape\n\n    beams = [([], 0)]  # (prefix, accumulated_log_prob)\n    for t in range(length):\n        new_beams = []\n        for prefix, accumulated_log_prob in beams:\n            for c in range(class_count):\n                log_prob = emission_log_prob[t, c]\n                if log_prob < emission_threshold:\n                    continue\n                new_prefix = prefix + [c]\n                # log(p1 * p2) = log_p1 + log_p2\n                new_accu_log_prob = accumulated_log_prob + log_prob\n                new_beams.append((new_prefix, new_accu_log_prob))\n\n        # sorted by accumulated_log_prob\n        new_beams.sort(key=lambda x: x[1], reverse=True)\n        beams = new_beams[:beam_size]\n\n    # sum up beams to produce labels\n    total_accu_log_prob = {}\n    for prefix, accu_log_prob in beams:\n        labels = tuple(_reconstruct(prefix, blank))\n        # log(p1 + p2) = logsumexp([log_p1, log_p2])\n        total_accu_log_prob[labels] = \\\n            logsumexp([accu_log_prob, total_accu_log_prob.get(labels, NINF)])\n\n    labels_beams = [(list(labels), accu_log_prob)\n                    for labels, accu_log_prob in total_accu_log_prob.items()]\n    labels_beams.sort(key=lambda x: x[1], reverse=True)\n    labels = labels_beams[0][0]\n    return labels\n\nAs we can have a prediction from the decoder that has length > 5, we don’t have character level accuracy for the metrics but only whole captcha accuracy\n\ndef captcha_accu_ctc(pred, targ, axis=-1):\n    log_probs = torch.nn.functional.log_softmax(pred, dim=2)\n    emission_log_probs = np.transpose(log_probs.detach().cpu().numpy(), (1, 0, 2))\n    decoder = beam_search_decode\n    label2char = i2l\n    \n    decoded_list = []\n    for emission_log_prob in emission_log_probs:\n        decoded = decoder(emission_log_prob, blank=blank, beam_size=beam_size)\n        decoded_list.append(decoded)\n    \n    count_ok = 0\n    for decode, gt in zip(decoded_list, targ):\n        if len(decode) == len(gt):\n            count_ok += (torch.tensor(decode).cuda() == gt).all().item()\n            \n    return count_ok/targ.shape[0]\n\n\n# loss_captcha_ctc(pred, one_batch[1])\n\n\ndls = dls.cuda()\nmodel = model.cuda()\n\n\nlearn = Learner(dls, model, loss_func=loss_captcha_ctc, metrics=[captcha_accu_ctc])\n# learn = Learner(dls, model, loss_func=loss_captcha_ctc)\n\n\nlearn.fit_one_cycle(1,1e-6)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      captcha_accu_ctc\n      time\n    \n  \n  \n    \n      0\n      0.001245\n      0.070678\n      0.961538\n      00:06\n    \n  \n\n\n\n\nlearn.lr_find()\n\n\n\n\n\n\n\n\nSuggestedLRs(valley=0.0014454397605732083)\n\n\n\n\n\n\nlearn.fit_one_cycle(60, 3e-3)\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      captcha_accu_ctc\n      time\n    \n  \n  \n    \n      0\n      3.364362\n      3.221772\n      0.000000\n      00:05\n    \n    \n      1\n      3.239760\n      3.222240\n      0.000000\n      00:05\n    \n    \n      2\n      3.198520\n      3.179216\n      0.000000\n      00:05\n    \n    \n      3\n      3.068399\n      3.082180\n      0.000000\n      00:05\n    \n    \n      4\n      2.935494\n      2.940528\n      0.000000\n      00:05\n    \n    \n      5\n      2.778541\n      2.834429\n      0.000000\n      00:05\n    \n    \n      6\n      2.595863\n      2.414017\n      0.000000\n      00:05\n    \n    \n      7\n      2.398474\n      2.306193\n      0.000000\n      00:05\n    \n    \n      8\n      2.133149\n      2.030112\n      0.009615\n      00:05\n    \n    \n      9\n      1.933357\n      2.035026\n      0.000000\n      00:05\n    \n    \n      10\n      1.740602\n      3.510546\n      0.000000\n      00:05\n    \n    \n      11\n      1.571230\n      1.606472\n      0.000000\n      00:05\n    \n    \n      12\n      1.481388\n      1.380839\n      0.028846\n      00:05\n    \n    \n      13\n      1.363306\n      1.311289\n      0.028846\n      00:05\n    \n    \n      14\n      1.196686\n      1.012929\n      0.125000\n      00:05\n    \n    \n      15\n      0.932915\n      0.713615\n      0.192308\n      00:05\n    \n    \n      16\n      0.730192\n      0.596288\n      0.278846\n      00:05\n    \n    \n      17\n      0.589729\n      0.484889\n      0.442308\n      00:05\n    \n    \n      18\n      0.393728\n      0.315344\n      0.567308\n      00:05\n    \n    \n      19\n      0.335306\n      0.282954\n      0.663462\n      00:05\n    \n    \n      20\n      0.253060\n      0.164563\n      0.826923\n      00:05\n    \n    \n      21\n      0.192399\n      0.202485\n      0.778846\n      00:05\n    \n    \n      22\n      0.152099\n      0.170849\n      0.788462\n      00:05\n    \n    \n      23\n      0.165517\n      0.182350\n      0.769231\n      00:05\n    \n    \n      24\n      0.143058\n      0.116091\n      0.875000\n      00:05\n    \n    \n      25\n      0.140082\n      0.098341\n      0.884615\n      00:05\n    \n    \n      26\n      0.107128\n      0.153724\n      0.846154\n      00:05\n    \n    \n      27\n      0.104198\n      0.064582\n      0.903846\n      00:05\n    \n    \n      28\n      0.075773\n      0.164378\n      0.826923\n      00:05\n    \n    \n      29\n      0.073986\n      0.095392\n      0.942308\n      00:05\n    \n    \n      30\n      0.121426\n      0.098069\n      0.875000\n      00:05\n    \n    \n      31\n      0.061526\n      0.085097\n      0.913462\n      00:05\n    \n    \n      32\n      0.050841\n      0.033660\n      0.961538\n      00:05\n    \n    \n      33\n      0.041742\n      0.113056\n      0.884615\n      00:05\n    \n    \n      34\n      0.037825\n      0.035997\n      0.980769\n      00:05\n    \n    \n      35\n      0.042165\n      0.057766\n      0.923077\n      00:05\n    \n    \n      36\n      0.040758\n      0.056158\n      0.961538\n      00:05\n    \n    \n      37\n      0.013569\n      0.063323\n      0.951923\n      00:05\n    \n    \n      38\n      0.017145\n      0.041725\n      0.951923\n      00:05\n    \n    \n      39\n      0.016637\n      0.050826\n      0.951923\n      00:05\n    \n    \n      40\n      0.015019\n      0.039701\n      0.971154\n      00:05\n    \n    \n      41\n      0.007477\n      0.036252\n      0.980769\n      00:05\n    \n    \n      42\n      0.017243\n      0.036068\n      0.980769\n      00:05\n    \n    \n      43\n      0.011176\n      0.045191\n      0.951923\n      00:05\n    \n    \n      44\n      0.010634\n      0.045656\n      0.971154\n      00:05\n    \n    \n      45\n      0.005593\n      0.048920\n      0.961538\n      00:05\n    \n    \n      46\n      0.002363\n      0.049634\n      0.961538\n      00:05\n    \n    \n      47\n      0.005349\n      0.049498\n      0.961538\n      00:05\n    \n    \n      48\n      0.012180\n      0.036904\n      0.971154\n      00:05\n    \n    \n      49\n      0.001877\n      0.035886\n      0.980769\n      00:05\n    \n    \n      50\n      0.002923\n      0.043079\n      0.971154\n      00:05\n    \n    \n      51\n      0.002380\n      0.034152\n      0.980769\n      00:05\n    \n    \n      52\n      0.002510\n      0.038204\n      0.980769\n      00:05\n    \n    \n      53\n      0.001762\n      0.034696\n      0.980769\n      00:05\n    \n    \n      54\n      0.002121\n      0.037318\n      0.980769\n      00:05\n    \n    \n      55\n      0.000552\n      0.043198\n      0.971154\n      00:05\n    \n    \n      56\n      0.000387\n      0.041396\n      0.980769\n      00:05\n    \n    \n      57\n      0.001379\n      0.037345\n      0.980769\n      00:05\n    \n    \n      58\n      0.002729\n      0.040222\n      0.971154\n      00:05\n    \n    \n      59\n      0.000564\n      0.051966\n      0.971154\n      00:05\n    \n  \n\n\n\n\nlearn.recorder.plot_loss()\n\n\n\n\nOk, we have good results too. As it is a very simple dataset, it’s hard to say which technique is better. However, the CRNN training loss is much lower than validation loss, It might be a hint that we can tune it to get more accuracy or training faster? Please DM me if you have an idea about it. Thanks"
  },
  {
    "objectID": "posts/classification_loss_func.html",
    "href": "posts/classification_loss_func.html",
    "title": "Classification loss function as comparing 2 vectors",
    "section": "",
    "text": "Walking through a simple Dot-Product to Cross-Entropy then finally a completely new loss function"
  },
  {
    "objectID": "posts/classification_loss_func.html#introduction",
    "href": "posts/classification_loss_func.html#introduction",
    "title": "Classification loss function as comparing 2 vectors",
    "section": "Introduction",
    "text": "Introduction\nIn this blog post, I will try to explain the Classification Loss function from the perspective of comparing 2 vectors. We’ll start with the most simple loss: the dot-product of 2 vectors, with a simple modification we’ll have the Cross-Entropy Loss and then try to beat the result of Cross-Entropy with our one."
  },
  {
    "objectID": "posts/classification_loss_func.html#review-the-topic",
    "href": "posts/classification_loss_func.html#review-the-topic",
    "title": "Classification loss function as comparing 2 vectors",
    "section": "Review the topic",
    "text": "Review the topic\n\nHow to compare 2 vectors\nA vector is just an arrow with a direction and length. So for the binary classification problem, we have an output vector that has 2 elements and sum up to 1. [p1, p2] and p1+p2 = 1\nImagine we want our target vector to be [0,1]. The worst prediction is [0,1] and a good prediction could be [0.99,0.01]\n\n\n\nVector\n\n\nWe notice that \\(cos(\\theta)\\) for \\(\\theta\\) from 0° to 90° decreases strictly from 1 to 0 (from the best to worst prediction) so it can be an indicator for our prediction (And it exists - cosine similarity). Any function that has value increasing/decreasing strictly from the best prediction to the worst prediction can be considered a loss function\nThe dot-product has some relevance to the cosine mentioned above. The dot-product from a geometrical point of view is the projection of a vector to the direction of another vector and multiplying them both. And the projection is calculated by multiplying the cosine of the angle between these 2 vectors. But in this simple case, the projection is just the y value if our predicted vector is (x,y) and the target vector is (0,1). And the y value decreases strictly from 1 to 0 from the vector (1,0) to vector (0,1) . So the dot-product can also be a candidate for our loss function too\n\n\n\nDot-Product\n\n\nIn the multiclass classification problem with the target vector encoded by one-hot vector (Vector has just one 1 value and 0 for all others position). The dot-product calculation is very simple. Taking the value in the predicted vector at its position in the target vector, we have 1. (Dot-product in algebra is just the sum of the element-wise multiplication)\n\nv1 = np.array([0,1,0,0]) # target vector \nv2 = np.array([0.2,0.3,0.1,0.4]) # predicted vector\nprint(sum(v1*v2))\n\n0.3\n\n\nFor the Cross-Entropy Loss Function, instead of multiplying the predicted vector, we multiply the logarithm of the predicted vector\n\nprint(sum(v1*np.log(v2)))\nprint(np.log(0.3))\n\n-1.2039728043259361\n-1.2039728043259361\n\n\nIn the next section, we will experiment the dot-product loss function, the cross-entropy loss function and try to invent of own loss function by changing the function applying the the predicted vector (like logarithm in the case of Cross-Entropy)"
  },
  {
    "objectID": "posts/classification_loss_func.html#getting-data",
    "href": "posts/classification_loss_func.html#getting-data",
    "title": "Classification loss function as comparing 2 vectors",
    "section": "Getting Data",
    "text": "Getting Data\nThis part is simply for data preparation. Putting all the images and their labels into the corresponding dataloader\n\nfrom fastai2.vision.all import *\npath = untar_data(URLs.PETS)\nitems = get_image_files(path/'images')\n\ndef label_func(fname):\n    return \"cat\" if fname.name[0].isupper() else \"dog\"\n\nlabeller = RegexLabeller(pat=r\"(.+)_\\d+.jpg\")\n\n\npets = DataBlock(blocks=(ImageBlock, CategoryBlock),\n                    get_items=get_image_files,\n                    splitter=RandomSplitter(),\n                    get_y = Pipeline([lambda x: getattr(x,'name'), labeller]),\n                    item_tfms=Resize(224), \n                    batch_tfms=aug_transforms(),\n                    )\n\n\ndls = pets.dataloaders(path/'images')\n\n\ndls.c # number of categories in this dataset\n\n37\n\n\n\ndls.show_batch()"
  },
  {
    "objectID": "posts/classification_loss_func.html#experimenting",
    "href": "posts/classification_loss_func.html#experimenting",
    "title": "Classification loss function as comparing 2 vectors",
    "section": "Experimenting",
    "text": "Experimenting\nAll our loss functions will have two parts. The first part is the softmax function - scaling our output to [0,1]. The second part is how we penalize our prediction - high loss if the predicted vector is far from the target.\n\nCross_Entropy loss\n\ndef softmax(x): return x.exp() / (x.exp().sum(-1)).unsqueeze(-1)\ndef nl(input, target): return -input[range(target.shape[0]), target].log().mean()\ndef our_cross_entropy(input, target):\n    pred = softmax(input)\n    loss = nl(pred, target)\n    return loss\n\n\nlearn = cnn_learner(dls, resnet18, loss_func=our_cross_entropy, metrics=error_rate)\n\n\nlearn.fine_tune(1)\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      1.621736\n      0.353662\n      0.110284\n      00:31\n    \n  \n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      0.535891\n      0.278063\n      0.092016\n      00:41\n    \n  \n\n\n\n\n\nDot Product Loss\nThis is a negative dot-production loss function because we multiply the result by -1 to make it increase from best to worst prediction\n\ndef dot_product_loss(input, target):\n    pred = softmax(input)\n    return -(pred[range(target.shape[0]), target]).mean()\n\n\nlearn = cnn_learner(dls, resnet18, loss_func=dot_product_loss, metrics=error_rate)\n\n\nlearn.fine_tune(1)\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      -0.485698\n      -0.798422\n      0.179973\n      00:31\n    \n  \n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      -0.778386\n      -0.841704\n      0.144790\n      00:42\n    \n  \n\n\n\nWow ! despite the simplicity of the dot-product loss function, we got not so bad result (0.14) after 2 epochs. Our dataset has 37 categories of pets and a random prediction will give us the error rate (1-1/37)=0.97. Can we do it better ?\n\n\nThe difference between cross-entropy loss and dot-product loss\nHow these 2 loss functions penalize the prediction is described as below. The target vector is always [0,1]\n\nx = np.linspace(0.01,0.99,100) # the predicted vector at index 2\ny_dot_product = -x\ny_cross_entropy = -np.log(x)\n\n\nplt.plot(x, y_dot_product, label='dot_prod')\nplt.plot(x, y_cross_entropy, label='cross_entropy')\nplt.legend()\nplt.show()\n\n\n\n\nFrom the plot, we can see that the cross-entropy function penalizes more when we have a wrong prediction (kind of exponential shape)\nIn the next section, we will try others loss functions but the core idea is still based on the dot-product loss function.\n\n\nInverse Loss\nInstead of multiplying by -1, we can inverse the predicted value to make it increase from best to worst prediction. Let’s see the plot below:\n\ny_inv = 1/x\n\n\nplt.plot(x, y_dot_product, label='dot_prod')\nplt.plot(x, y_cross_entropy, label='cross_entropy')\nplt.plot(x, y_inv, label='inverse loss')\n\nplt.legend()\nplt.show()\n\n\n\n\nThe inverse loss penalizes may be too much compared to the 2 previous ones, no tolerance at all might be not so good. But let’s try it anyway\n\ndef inverse_loss(input, target):\n    pred = softmax(input)\n    return (1/((pred[range(target.shape[0]), target]))).mean()\n\n\nlearn = cnn_learner(dls, resnet18, loss_func=inverse_loss, metrics=error_rate)\n\n\nlearn.fine_tune(1)\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      447.855957\n      11.976704\n      0.466170\n      00:19\n    \n  \n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      50.260994\n      5.570698\n      0.258457\n      00:24\n    \n  \n\n\n\nOk, we have s worst result. But with this idea, we can easily tune the loss function. We can power the denominator with a value < 1 to decrease the penalization. For example 0.2\n\ny_inv_tuning = 1/(x**0.2)\n\n\nplt.plot(x, y_dot_product, label='dot_prod')\nplt.plot(x, y_cross_entropy, label='cross_entropy')\nplt.plot(x, y_inv_tuning, label='inverse loss tuning')\n\nplt.legend()\nplt.show()\n\n\n\n\nLet’s try this new loss function\n\ndef inverse_loss_tunning(input, target):\n    pred = softmax(input)\n    return (1/((pred[range(target.shape[0]), target]).pow(0.2))).mean()\n\n\nlearn = cnn_learner(dls, resnet18, loss_func=inverse_loss_tunning, metrics=error_rate)\n\n\nlearn.fine_tune(1)\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      1.583183\n      1.099432\n      0.125846\n      00:31\n    \n  \n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      1.174570\n      1.070881\n      0.091340\n      00:42\n    \n  \n\n\n\nWe get not so different error rate: 0.091 compared to 0.092 of the cross-entropy loss function."
  },
  {
    "objectID": "posts/ts_dataloaders.html",
    "href": "posts/ts_dataloaders.html",
    "title": "Dynamic Size DataLoader",
    "section": "",
    "text": "Preparing the Dynamic size DataLoader for sequences with wide distributed length\nWhen you work with sequence data (sensors, music, …), you might encounter a case when the sequence length distribution is very large. For example, a song can last 30s to many minutes. Resampling to fixed size can lose details information. In this blog post, I will talk about how to create a dynamic size DataLoader."
  },
  {
    "objectID": "posts/ts_dataloaders.html#model-works-with-dynamic-size-data",
    "href": "posts/ts_dataloaders.html#model-works-with-dynamic-size-data",
    "title": "Dynamic Size DataLoader",
    "section": "Model works with Dynamic Size data",
    "text": "Model works with Dynamic Size data\nBelow is some examples of layer/model which can deal with the dynamic size data.\n\nAdaptiveAvgPool layer which is used widely in the CNN model\nRNN model\n\n\nAdaptiveAvgPool\nAdaptiveAvgPool2D The output size is fixed no matter the input\n\n\n\nAdaptiveAvgPool2d\n\n\nYou can see below, no matter the input size ( [5,5], [6,4], [4,3] ), the output size is [2,2]\n\nx1 = torch.randn(8,16,5,5)\nx2 = torch.randn(8,16,6,4)\nx2 = torch.randn(8,16,4,3)\n\n\nnn.AdaptiveAvgPool2d(2)(x1).shape, nn.AdaptiveAvgPool2d(2)(x2).shape\n\n(torch.Size([8, 16, 2, 2]), torch.Size([8, 16, 2, 2]))\n\n\n\n\nRNN\nIn a sequence classification problem, we can use a RNN model, extracting the last timestep features and finally passing by a linear layer. So this kind of architecture doesn’t depend on the input either.\n\n\n\nrnn\n\n\nThe inputs below are 3 features and 512-244 steps, after the RNN model, both outputs are [16,100]\n\nx1 = torch.randn(16, 512, 3)\nx2 = torch.randn(16, 224, 3)\n\n\nrnn = nn.RNN(3,100)\n\n\nrnn(x1)[0].shape\n\ntorch.Size([16, 512, 100])\n\n\n\nrnn(x1)[0][:,-1].shape, rnn(x2)[0][:,-1].shape\n\n(torch.Size([16, 100]), torch.Size([16, 100]))\n\n\nThere are many models like that in various libraries. For example: timeseriesai. So the difficulty might not stay in building models but how to prepare the data to make use of their full power. Each problem is different so usually, you have to write the DataLoader yourself\nReference: Some codes are taken from @Ivan answer of the question pytorch-can-i-group-batches-by-length on stackoverflow"
  },
  {
    "objectID": "posts/ts_dataloaders.html#dynamic-dataloader",
    "href": "posts/ts_dataloaders.html#dynamic-dataloader",
    "title": "Dynamic Size DataLoader",
    "section": "Dynamic DataLoader",
    "text": "Dynamic DataLoader\nLet’s first create a dataset where each item is a 1d series with different lengths\n\nDataset\n\nclass DS(Dataset):\n    def __init__(self, signals):\n        super().__init__()\n        self.len = len(signals)\n        self.signals = signals\n\n    def __getitem__(self, i):\n        return torch.tensor(self.signals[i]), torch.tensor([random.randint(0,1)])\n\n    def __len__(self):\n        return self.len\n\n\nsignal_len = np.random.randint(0, 100, (16*6))\nsignals = [np.random.rand(s) for s in signal_len]\nds = DS(signals)\n\n\nsignal_len\n\narray([95, 77, 85, 87, 45, 47, 77, 93, 75,  2, 10, 69, 75, 61, 91, 13, 55,\n       31,  3, 51, 68, 94, 28, 99, 93, 18, 48, 16, 81, 11, 74, 89, 36,  3,\n       28, 92, 42, 36, 11, 44, 26, 63,  5,  4, 25, 54, 23, 23, 83, 33, 77,\n       45, 38, 52, 50, 75, 17, 29,  2, 69, 44, 83,  1, 47, 12, 17, 14, 35,\n       97, 53, 13, 49, 24, 78, 59,  1, 27, 43, 89, 37, 98,  8, 90, 77,  9,\n       29, 46, 44, 10, 25, 35, 37, 49, 98, 17, 25])\n\n\n\n\nCollate Function\nEven when you have a model that can handle input with different sizes, every item in a batch must have the same shape so they can be stacked together (the size of items in a batch are equal, but the sizes of different batches are different ). The collate_fn parameters in PyTorch DataLoader is responsible for this job\n\n\n\ncollate_fn\n\n\n\n\nFixed Size DataLoader with interpolation\n\n\n\n\n\n\nNote\n\n\n\nBefore trying out Dynamic Size DataLoader, you should test the fixed sized first by using: F.interpolate. It can be used as your baseline\n\n\nTake a look at the x-axis in 2 plots below\n\nx = torch.sin(torch.arange(0,5,0.01))\n\n\nplt.plot(x)\nplt.figure()\nplt.plot(np.array(F.interpolate(x[None,None,:], 200)[0].squeeze()))\n\n\n\n\n\n\n\nBelow is the simplest version of a collate_fn you should use in your baseline model\n\nbatch = [ds[i] for i in range(4)]\n\n\n\n\n\n\n\nTip\n\n\n\nIt’s easier to write a function when you can experiment each line in a cell. I usually take out a list of item from the DataSet to experiment with my collate_fn.\n\n\n\nbatch = [ds[i] for i in range(4)]\n\n\ndef collate_fn(batch):\n    (xx, yy) = zip(*batch)\n    x_news = [F.interpolate(_x[None,None,:], (50))[0] for _x in xx]\n    return torch.stack(x_news), torch.concat(yy)\n\n\nxb, yb = collate_fn(batch)\n\n\nxb.shape, yb.shape\n\n(torch.Size([4, 1, 50]), torch.Size([4]))\n\n\nAny item passed through this DataLoader will be rescaled to 50 timesteps. A disadvantage of this technique is that you will have distortion or you might lose details information.\n\n\nDynamic size DataLoader\nIn this DataLoader, each batch will have a different size based on a reference (ex: maximum length of items). For padding, you can try padding with a constant, repeating signal, etc.\n\n\n\n\n\n\nCation\n\n\n\nthe F.pad function in Pytorch can only work with (padding value/2) < dimension, so you might need to write the padding function yourself\n\n\nAn example of padding is by repeating using Tensor.repeat\n\nx = torch.sin(torch.arange(0,5,0.01))\n\n\nplt.plot(x)\nplt.figure()\nplt.plot(x.repeat(2))\n\n\n\n\n\n\n\n\ndef collate_padding(batch):\n    (xx, yy) = zip(*batch)\n    x_lens = [len(x) for x in xx]\n    idx_max = np.argmax(x_lens)\n    max_len = x_lens[idx_max]\n    \n    x_pads = []\n    for i, _x in enumerate(xx):\n        if i == idx_max:\n            x_pad = _x\n        else:\n            pad_nb = max_len//_x.shape[0]\n            x_pad = _x.repeat(1+pad_nb)[:max_len]\n        x_pads.append(x_pad)\n    return torch.stack(x_pads), torch.concat(yy)\n\n\nxb, yb = collate_padding(batch)\n\n\nxb.shape, yb.shape\n\n(torch.Size([4, 95]), torch.Size([4]))\n\n\n\ndl = DataLoader(dataset=ds, batch_size=16, shuffle=True, collate_fn=collate_padding)\n\n\nfor x in dl:\n    print(x[0].shape)\n\ntorch.Size([16, 93])\ntorch.Size([16, 98])\ntorch.Size([16, 99])\ntorch.Size([16, 97])\ntorch.Size([16, 94])\ntorch.Size([16, 74])\n\n\n\n\nGrouping batch by size\nIn the padding collate_fn version above, in a batch, if you have one very short item and one is very long, the short one will be repeated again and again and it is irrealistic in the real case (You can see the signal_len is distributed from 1 to 100 but most of the batches above are long). So you might want to group each batch based on their sizes\n\nsignal_len\n\narray([95, 77, 85, 87, 45, 47, 77, 93, 75,  2, 10, 69, 75, 61, 91, 13, 55,\n       31,  3, 51, 68, 94, 28, 99, 93, 18, 48, 16, 81, 11, 74, 89, 36,  3,\n       28, 92, 42, 36, 11, 44, 26, 63,  5,  4, 25, 54, 23, 23, 83, 33, 77,\n       45, 38, 52, 50, 75, 17, 29,  2, 69, 44, 83,  1, 47, 12, 17, 14, 35,\n       97, 53, 13, 49, 24, 78, 59,  1, 27, 43, 89, 37, 98,  8, 90, 77,  9,\n       29, 46, 44, 10, 25, 35, 37, 49, 98, 17, 25])\n\n\nHow do you do that? by using the batch_sampler parameter in DataLoader. Now it’s you to control which item in the Dataset is passed through which iteration in the DataLoader\n\n\n\nBatch grouping\n\n\n\nbatch_nb = 6\n\n\nsampler = np.split(signal_len.argsort()[::-1], batch_nb)\n\n\ndl = DataLoader(dataset=ds, batch_sampler=sampler, collate_fn=collate_padding)\n\n\nbatches\n\n[array([23, 80, 93, 68,  0, 21, 24,  7, 35, 14, 82, 78, 31,  3,  2, 61]),\n array([48, 28, 73,  1, 50,  6, 83, 55, 12,  8, 30, 59, 11, 20, 41, 13]),\n array([74, 16, 45, 69, 53, 19, 54, 92, 71, 26,  5, 63, 86, 51,  4, 60]),\n array([39, 87, 77, 36, 52, 79, 91, 32, 37, 67, 90, 49, 17, 85, 57, 34]),\n array([22, 76, 40, 95, 89, 44, 72, 47, 46, 25, 94, 65, 56, 27, 66, 15]),\n array([70, 64, 29, 38, 10, 88, 84, 81, 42, 43, 33, 18,  9, 58, 75, 62])]\n\n\n\nfor x in dl:\n    print(x[0].shape)\n\ntorch.Size([16, 99])\ntorch.Size([16, 83])\ntorch.Size([16, 59])\ntorch.Size([16, 44])\ntorch.Size([16, 28])\ntorch.Size([16, 13])\n\n\nFrom the shape above, you can see that the size’s length is distributed better in each batch.\n\n\n\n\n\n\nNote\n\n\n\nNow, items in each batch don’t change, so you might lose the randomness in your training process which might lead to an overfit -> Use with caution"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dhblog",
    "section": "",
    "text": "deeplearning\n\n\naudio\n\n\n\n\n\n\n\n\n\n\n\nJul 11, 2023\n\n\nDien-Hoa Truong\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ntimeseries\n\n\ndeeplearning\n\n\ntransformer\n\n\n\n\n\n\n\n\n\n\n\nApr 26, 2023\n\n\nDien-Hoa Truong\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ndeeplearning\n\n\ntimeseries\n\n\n\n\n\n\n\n\n\n\n\nFeb 4, 2023\n\n\nDien-Hoa Truong\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ndeeplearning\n\n\n\n\n\n\n\n\n\n\n\nJan 18, 2023\n\n\nDien-Hoa Truong\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncomputer-vision\n\n\ndeeplearning\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2022\n\n\nDien-Hoa Truong\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncomputer-vision\n\n\ndeeplearning\n\n\n\n\n\n\n\n\n\n\n\nSep 15, 2022\n\n\nDien-Hoa Truong\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ndeeplearning\n\n\n\n\n\n\n\n\n\n\n\nMay 1, 2020\n\n\nDien-Hoa Truong\n\n\n\n\n\n\nNo matching items"
  }
]