{"title":"Captcha prediction - From CNN to CRNN","markdown":{"yaml":{"title":"Captcha prediction - From CNN to CRNN","author":"Dien-Hoa Truong","date":"2022-09-30","categories":["computer-vision","deeplearning"]},"headingText":"Mid-Level fastai Dataloaders","containsRefs":false,"markdown":"\n\n3 approaches predicting the captcha with > 95% accuracy\n\n![Captcha](https://www.drupal.org/files/styles/grid-3-2x/public/images/image_captcha_example.png?itok=nD8iHtGl)\n\nDo you want a little bit more challenge than a traditional Image Classification? Let's see if we can classify a sequence of classes rather than a single one ;). \n\nIn this blog post, I will try to break the captcha using 3 different approaches.\n\n__In this blog post__:\n\n- Build captcha `Dataloaders` using Mid-level fastai API\n- Tweak number of outputs can solve the problem\n- Intuition about the receptive field and why we should remove the `AdaptiveAvgPool2d` layer \n- Sequential technique, Combining CNN + RNN -> CRNN with CTC Loss \n\nSpecial thanks to these references below for helping me out during this development:\n- [Fastai Captcha Recognition](https://augustasmacijauskas.github.io/personal-website/machine-learning/deep-learning/multi-output-) by Augustas Macijauskas\n- [CRNN-Pytorch repo](https://github.com/GitYCC/crnn-pytorch) by GitYCC\n\n\nIn this part, we will use the [Mid-Level API fastai](https://github.com/fastai/fastbook/blob/master/11_midlevel_data.ipynb) to load data. This tool will help us to create `Dataloaders` which compatible with all the fastai ecosystems\n\nIn brief, we will create a `CaptchaTransform` ( similar to a [Pytorch Datasets](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html) ) which returns something showable (`CaptchaImage` in this case)\n\nTake a look at this [fastai tutorial](https://docs.fast.ai/tutorial.pets.html) for more details\n\n:::{.callout-note}\nBelow is the mapping from label to index and vice-versa. The index starts from `1` because we save the `0` for `UNKNOWN` class which is use in the last section `CNN + RNN`\n:::\n\n## An Image Classification Model with a tweak on output dimension\n\nA simple image classification model is used here with the output dimension: `Number_of_vocab x Number_of_classes`. Then, while calculating the loss function, we reshape the dimension and calculating the Cross-Entropy loss for each class (The fastai [CrossEntropyLossFlat](https://docs.fast.ai/losses.html#crossentropylossflat) can help you to specify which axis that you want to calculate the Cross-Entropy loss on)\n\n![simple tweak on output](attachment:image-2.png)\n\nWow! With this simple trick, we can reach 97% accuracy for the prediction 5-digits captcha. Very impressive! Let's see if we can do it better with other techniques\n\n## Remove the AdaptiveAvgPool2d to reserve spatial information\n\nIn the model used above, between the `body` and `head`, there is an `AdaptiveAvgPool2d` layer, which blurs all essential spatial information. So let's remove it and create our own `head`\n\n![Receptive field with and without Adaptive Average Pooling](attachment:image-3.png)\n\n:::{.callout-tip}\n## Intuition\n\nFrom the Illustration above, we can see that, with `AdaptiveAvgPool2d`, each element in the feature vector must understand the whole Captcha, to classify correctly. To facilitate the work, by removing the Pooling layer,  each feature needs to represent only a part of the Captcha, or in the best case, a letter. Combining all the letter's features together can give us a Captcha prediction\n:::\n\nWe have a quite similar result to the previous model after 60 epochs. However, this one learns much faster. After 15 epochs, it attains already 43% captcha accuracy while the `With AdaptiveAvgPool2d` is still at 0% \n\n## CRNN + CTC Loss\n\nOne can imagine, from the intuition of the last section, if we can extract features from letters and then predict the captcha, How about using a `Recurrent Neural Network` (RNN)? Is it for solving sequence problems right? \n\nYes, yes, It is the CRNN.\n\n![CRNN Model](attachment:image.png)\n\n:::{.callout-note}\n\nFeel free to run the model step by step through each layer to understand better the dimension \n\n:::\n\n:::{.callout-note}\n\nThe Sequence Length of the output doesn't necessarily equal to the Captcha Length (which is 5 in our case) because our loss function `CTC Loss` knows how to handle it\n\n:::\n\n\nThe `CNN-Body` model I use here is `resnet34`, but not the entire one. We cut it after some layers. The reason is, the deeper the image passes through the `CNN` the more its Width shrink, and it can not be smaller than our captcha length (which is 5). Below you can see I choose to cut after 7 layers so the feature's Width is still 13 (the last dimension of the tensor)\n\nBy running the `CNN` body manually, I can know the number of output features, height and width which will be used later for building the CRNN model\n\nThe loss function we use here is [CTC Loss](https://pytorch.org/docs/stable/generated/torch.nn.CTCLoss.html). In brief, it is a loss function that can handle a sequence classification without a specific alignment (Because we don't have a character-level dataset and the span of each character is random). An Illustration is below (Taken from https://sid2697.github.io/Blog_Sid/algorithm/2019/10/19/CTC-Loss.html). In CTC Loss, it allows a repeated prediction with a character that spans through multiple positions and also a blank character. However, we need a decoder to decode later the output. I will talk about it in the next section\n\n![CTC Loss Illustration](https://sid2697.github.io/Blog_Sid/assets/images/CTC_2.png)\n\n\n### Decoder and Metrics\n\nAs the output of CRNN model is not exactly corresponding to the Groud-Truth, we must have something to decode it and get the final prediction. Check this tutorial for more details https://towardsdatascience.com/beam-search-decoding-in-ctc-trained-neural-networks-5a889a3d85a7. Below there is code for the `greedy` and `beam-search` technique\n\nAs we can have a prediction from the decoder that has length > 5, we don't have character level accuracy for the metrics but only whole captcha accuracy\n\nOk, we have good results too. As it is a very simple dataset, it's hard to say which technique is better. However, the CRNN training loss is much lower than validation loss, It might be a hint that we can tune it to get more accuracy or training faster? Please DM me if you have an idea about it. Thanks\n","srcMarkdownNoYaml":"\n\n3 approaches predicting the captcha with > 95% accuracy\n\n![Captcha](https://www.drupal.org/files/styles/grid-3-2x/public/images/image_captcha_example.png?itok=nD8iHtGl)\n\nDo you want a little bit more challenge than a traditional Image Classification? Let's see if we can classify a sequence of classes rather than a single one ;). \n\nIn this blog post, I will try to break the captcha using 3 different approaches.\n\n__In this blog post__:\n\n- Build captcha `Dataloaders` using Mid-level fastai API\n- Tweak number of outputs can solve the problem\n- Intuition about the receptive field and why we should remove the `AdaptiveAvgPool2d` layer \n- Sequential technique, Combining CNN + RNN -> CRNN with CTC Loss \n\nSpecial thanks to these references below for helping me out during this development:\n- [Fastai Captcha Recognition](https://augustasmacijauskas.github.io/personal-website/machine-learning/deep-learning/multi-output-) by Augustas Macijauskas\n- [CRNN-Pytorch repo](https://github.com/GitYCC/crnn-pytorch) by GitYCC\n\n## Mid-Level fastai Dataloaders\n\nIn this part, we will use the [Mid-Level API fastai](https://github.com/fastai/fastbook/blob/master/11_midlevel_data.ipynb) to load data. This tool will help us to create `Dataloaders` which compatible with all the fastai ecosystems\n\nIn brief, we will create a `CaptchaTransform` ( similar to a [Pytorch Datasets](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html) ) which returns something showable (`CaptchaImage` in this case)\n\nTake a look at this [fastai tutorial](https://docs.fast.ai/tutorial.pets.html) for more details\n\n:::{.callout-note}\nBelow is the mapping from label to index and vice-versa. The index starts from `1` because we save the `0` for `UNKNOWN` class which is use in the last section `CNN + RNN`\n:::\n\n## An Image Classification Model with a tweak on output dimension\n\nA simple image classification model is used here with the output dimension: `Number_of_vocab x Number_of_classes`. Then, while calculating the loss function, we reshape the dimension and calculating the Cross-Entropy loss for each class (The fastai [CrossEntropyLossFlat](https://docs.fast.ai/losses.html#crossentropylossflat) can help you to specify which axis that you want to calculate the Cross-Entropy loss on)\n\n![simple tweak on output](attachment:image-2.png)\n\nWow! With this simple trick, we can reach 97% accuracy for the prediction 5-digits captcha. Very impressive! Let's see if we can do it better with other techniques\n\n## Remove the AdaptiveAvgPool2d to reserve spatial information\n\nIn the model used above, between the `body` and `head`, there is an `AdaptiveAvgPool2d` layer, which blurs all essential spatial information. So let's remove it and create our own `head`\n\n![Receptive field with and without Adaptive Average Pooling](attachment:image-3.png)\n\n:::{.callout-tip}\n## Intuition\n\nFrom the Illustration above, we can see that, with `AdaptiveAvgPool2d`, each element in the feature vector must understand the whole Captcha, to classify correctly. To facilitate the work, by removing the Pooling layer,  each feature needs to represent only a part of the Captcha, or in the best case, a letter. Combining all the letter's features together can give us a Captcha prediction\n:::\n\nWe have a quite similar result to the previous model after 60 epochs. However, this one learns much faster. After 15 epochs, it attains already 43% captcha accuracy while the `With AdaptiveAvgPool2d` is still at 0% \n\n## CRNN + CTC Loss\n\nOne can imagine, from the intuition of the last section, if we can extract features from letters and then predict the captcha, How about using a `Recurrent Neural Network` (RNN)? Is it for solving sequence problems right? \n\nYes, yes, It is the CRNN.\n\n![CRNN Model](attachment:image.png)\n\n:::{.callout-note}\n\nFeel free to run the model step by step through each layer to understand better the dimension \n\n:::\n\n:::{.callout-note}\n\nThe Sequence Length of the output doesn't necessarily equal to the Captcha Length (which is 5 in our case) because our loss function `CTC Loss` knows how to handle it\n\n:::\n\n\nThe `CNN-Body` model I use here is `resnet34`, but not the entire one. We cut it after some layers. The reason is, the deeper the image passes through the `CNN` the more its Width shrink, and it can not be smaller than our captcha length (which is 5). Below you can see I choose to cut after 7 layers so the feature's Width is still 13 (the last dimension of the tensor)\n\nBy running the `CNN` body manually, I can know the number of output features, height and width which will be used later for building the CRNN model\n\nThe loss function we use here is [CTC Loss](https://pytorch.org/docs/stable/generated/torch.nn.CTCLoss.html). In brief, it is a loss function that can handle a sequence classification without a specific alignment (Because we don't have a character-level dataset and the span of each character is random). An Illustration is below (Taken from https://sid2697.github.io/Blog_Sid/algorithm/2019/10/19/CTC-Loss.html). In CTC Loss, it allows a repeated prediction with a character that spans through multiple positions and also a blank character. However, we need a decoder to decode later the output. I will talk about it in the next section\n\n![CTC Loss Illustration](https://sid2697.github.io/Blog_Sid/assets/images/CTC_2.png)\n\n\n### Decoder and Metrics\n\nAs the output of CRNN model is not exactly corresponding to the Groud-Truth, we must have something to decode it and get the final prediction. Check this tutorial for more details https://towardsdatascience.com/beam-search-decoding-in-ctc-trained-neural-networks-5a889a3d85a7. Below there is code for the `greedy` and `beam-search` technique\n\nAs we can have a prediction from the decoder that has length > 5, we don't have character level accuracy for the metrics but only whole captcha accuracy\n\nOk, we have good results too. As it is a very simple dataset, it's hard to say which technique is better. However, the CRNN training loss is much lower than validation loss, It might be a hint that we can tune it to get more accuracy or training faster? Please DM me if you have an idea about it. Thanks\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"captcha.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"litera","title-block-banner":true,"title":"Captcha prediction - From CNN to CRNN","author":"Dien-Hoa Truong","date":"2022-09-30","categories":["computer-vision","deeplearning"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}